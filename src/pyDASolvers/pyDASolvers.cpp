/* Generated by Cython 0.29.21 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/work/phe/HeyecanKoy/dafoam/packages/petsc-3.14.6/include/petsc.h",
            "DASolvers.H"
        ],
        "extra_compile_args": [
            "-std=c++11",
            "-Wno-deprecated-copy",
            "-DSolidDASolver",
            "-m64",
            "-DOPENFOAM_PLUS=1812",
            "-Dlinux64",
            "-DWM_ARCH_OPTION=64",
            "-DWM_DP",
            "-DWM_LABEL_SIZE=32",
            "-Wall",
            "-Wextra",
            "-Wnon-virtual-dtor",
            "-Wno-unused-parameter",
            "-Wno-invalid-offsetof",
            "-O3",
            "-DNoRepository",
            "-ftemplate-depth-100",
            "-fPIC",
            "-c",
            "-DCODI_AD_NONE"
        ],
        "extra_link_args": [
            "-Xlinker",
            "--add-needed",
            "-Xlinker",
            "--no-as-needed"
        ],
        "include_dirs": [
            "/work/phe/HeyecanKoy/dafoam/OpenFOAM/OpenFOAM-v1812/src/finiteVolume/lnInclude",
            "/work/phe/HeyecanKoy/dafoam/OpenFOAM/OpenFOAM-v1812/src/meshTools/lnInclude",
            "/work/phe/HeyecanKoy/dafoam/OpenFOAM/OpenFOAM-v1812/src/sampling/lnInclude",
            "/work/phe/HeyecanKoy/dafoam/OpenFOAM/OpenFOAM-v1812/src/fileFormats/lnInclude",
            "/work/phe/HeyecanKoy/dafoam/OpenFOAM/OpenFOAM-v1812/src/surfMesh/lnInclude",
            "/work/phe/HeyecanKoy/dafoam/OpenFOAM/OpenFOAM-v1812/src/OpenFOAM/lnInclude",
            "/work/phe/HeyecanKoy/dafoam/OpenFOAM/OpenFOAM-v1812/src/OSspecific/POSIX/lnInclude",
            "/work/phe/HeyecanKoy/dafoam/OpenFOAM/OpenFOAM-v1812/platforms/linux64IccDPInt32Opt/lib",
            "/work/phe/HeyecanKoy/dafoam/OpenFOAM/OpenFOAM-v1812/src/codipack/include",
            "/work/phe/HeyecanKoy/dafoam/OpenFOAM/OpenFOAM-v1812/src/medipack/include",
            "/work/phe/HeyecanKoy/dafoam/OpenFOAM/OpenFOAM-v1812/src/medipack/src",
            "/work/phe/HeyecanKoy/dafoam/packages/petsc-3.14.6/include",
            "/work/phe/HeyecanKoy/dafoam/packages/miniconda3/lib/python3.8/site-packages/petsc4py/include",
            "/work/phe/HeyecanKoy/dafoam/packages/petsc-3.14.6/real-opt/include",
            "../adjoint/lnInclude",
            "../include",
            "./"
        ],
        "language": "c++",
        "libraries": [
            "finiteVolume",
            "meshTools",
            "sampling",
            "DAFoamSolid",
            "petsc"
        ],
        "library_dirs": [
            "/work/phe/HeyecanKoy/dafoam/OpenFOAM/OpenFOAM-v1812/platforms/linux64IccDPInt32Opt/lib",
            "/work/phe/HeyecanKoy/dafoam/OpenFOAM/sharedLibs",
            "/work/phe/HeyecanKoy/dafoam/packages/petsc-3.14.6/lib",
            "/work/phe/HeyecanKoy/dafoam/packages/miniconda3/lib/python3.8/site-packages/petsc4py/include",
            "/work/phe/HeyecanKoy/dafoam/packages/petsc-3.14.6/real-opt/lib"
        ],
        "name": "pyDASolverSolid",
        "sources": [
            "pyDASolvers.pyx",
            "DASolvers.C"
        ]
    },
    "module_name": "pyDASolverSolid"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pyDASolverSolid
#define __PYX_HAVE_API__pyDASolverSolid
/* Early includes */
#include "petsc.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "DASolvers.H"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "pyDASolvers.pyx",
  "PETSc.pxd",
};

/*--- Type declarations ---*/
struct PyPetscCommObject;
struct PyPetscObjectObject;
struct PyPetscViewerObject;
struct PyPetscRandomObject;
struct PyPetscISObject;
struct PyPetscLGMapObject;
struct PyPetscSFObject;
struct PyPetscVecObject;
struct PyPetscFEObject;
struct PyPetscQuadObject;
struct PyPetscScatterObject;
struct PyPetscSectionObject;
struct PyPetscMatObject;
struct PyPetscNullSpaceObject;
struct PyPetscPCObject;
struct PyPetscKSPObject;
struct PyPetscSNESObject;
struct PyPetscTSObject;
struct PyPetscTAOObject;
struct PyPetscAOObject;
struct PyPetscDMObject;
struct PyPetscDSObject;
struct PyPetscPartitionerObject;
struct PyPetscDMLabelObject;
struct __pyx_obj_15pyDASolverSolid_pyDASolvers;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":91
 * # --------------------------------------------------------------------
 * 
 * ctypedef public api class Comm [             # <<<<<<<<<<<<<<
 *     type   PyPetscComm_Type,
 *     object PyPetscCommObject,
 */
struct PyPetscCommObject {
  PyObject_HEAD
  MPI_Comm comm;
  int isdup;
  PyObject *base;
};
typedef struct PyPetscCommObject PyPetscCommObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscComm_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":99
 *     cdef object base
 * 
 * ctypedef public api class Object [             # <<<<<<<<<<<<<<
 *     type   PyPetscObject_Type,
 *     object PyPetscObjectObject,
 */
struct PyPetscObjectObject {
  PyObject_HEAD
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object *__pyx_vtab;
  PyObject *__weakref__;
  PyObject *__pyx___dummy__;
  PetscObject oval;
  PetscObject *obj;
};
typedef struct PyPetscObjectObject PyPetscObjectObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscObject_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":111
 *     cdef object get_dict(self)
 * 
 * ctypedef public api class Viewer(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscViewer_Type,
 *     object PyPetscViewerObject,
 */
struct PyPetscViewerObject {
  struct PyPetscObjectObject __pyx_base;
  PetscViewer vwr;
};
typedef struct PyPetscViewerObject PyPetscViewerObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscViewer_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":117
 *     cdef PetscViewer vwr
 * 
 * ctypedef public api class Random(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscRandom_Type,
 *     object PyPetscRandomObject,
 */
struct PyPetscRandomObject {
  struct PyPetscObjectObject __pyx_base;
  PetscRandom rnd;
};
typedef struct PyPetscRandomObject PyPetscRandomObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscRandom_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":123
 *     cdef PetscRandom rnd
 * 
 * ctypedef public api class IS(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscIS_Type,
 *     object PyPetscISObject,
 */
struct PyPetscISObject {
  struct PyPetscObjectObject __pyx_base;
  IS iset;
};
typedef struct PyPetscISObject PyPetscISObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscIS_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":129
 *     cdef PetscIS iset
 * 
 * ctypedef public api class LGMap(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscLGMap_Type,
 *     object PyPetscLGMapObject,
 */
struct PyPetscLGMapObject {
  struct PyPetscObjectObject __pyx_base;
  ISLocalToGlobalMapping lgm;
};
typedef struct PyPetscLGMapObject PyPetscLGMapObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscLGMap_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":135
 *     cdef PetscLGMap lgm
 * 
 * ctypedef public api class SF(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscSF_Type,
 *     object PyPetscSFObject,
 */
struct PyPetscSFObject {
  struct PyPetscObjectObject __pyx_base;
  PetscSF sf;
};
typedef struct PyPetscSFObject PyPetscSFObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscSF_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":141
 *     cdef PetscSF sf
 * 
 * ctypedef public api class Vec(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscVec_Type,
 *     object PyPetscVecObject,
 */
struct PyPetscVecObject {
  struct PyPetscObjectObject __pyx_base;
  Vec vec;
};
typedef struct PyPetscVecObject PyPetscVecObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscVec_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":147
 *     cdef PetscVec vec
 * 
 * ctypedef public api class FE(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscFE_Type,
 *     object PyPetscFEObject,
 */
struct PyPetscFEObject {
  struct PyPetscObjectObject __pyx_base;
  PetscFE fe;
};
typedef struct PyPetscFEObject PyPetscFEObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscFE_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":153
 *     cdef PetscFE fe
 * 
 * ctypedef public api class Quad(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscQuad_Type,
 *     object PyPetscQuadObject,
 */
struct PyPetscQuadObject {
  struct PyPetscObjectObject __pyx_base;
  PetscQuadrature quad;
};
typedef struct PyPetscQuadObject PyPetscQuadObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscQuad_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":159
 *     cdef PetscQuadrature quad
 * 
 * ctypedef public api class Scatter(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscScatter_Type,
 *     object PyPetscScatterObject,
 */
struct PyPetscScatterObject {
  struct PyPetscObjectObject __pyx_base;
  VecScatter sct;
};
typedef struct PyPetscScatterObject PyPetscScatterObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscScatter_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":165
 *     cdef PetscScatter sct
 * 
 * ctypedef public api class Section(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscSection_Type,
 *     object PyPetscSectionObject,
 */
struct PyPetscSectionObject {
  struct PyPetscObjectObject __pyx_base;
  PetscSection sec;
};
typedef struct PyPetscSectionObject PyPetscSectionObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscSection_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":171
 *     cdef PetscSection sec
 * 
 * ctypedef public api class Mat(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscMat_Type,
 *     object PyPetscMatObject,
 */
struct PyPetscMatObject {
  struct PyPetscObjectObject __pyx_base;
  Mat mat;
};
typedef struct PyPetscMatObject PyPetscMatObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscMat_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":177
 *     cdef PetscMat mat
 * 
 * ctypedef public api class NullSpace(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscNullSpace_Type,
 *     object PyPetscNullSpaceObject,
 */
struct PyPetscNullSpaceObject {
  struct PyPetscObjectObject __pyx_base;
  MatNullSpace nsp;
};
typedef struct PyPetscNullSpaceObject PyPetscNullSpaceObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscNullSpace_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":183
 *     cdef PetscNullSpace nsp
 * 
 * ctypedef public api class PC(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscPC_Type,
 *     object PyPetscPCObject,
 */
struct PyPetscPCObject {
  struct PyPetscObjectObject __pyx_base;
  PC pc;
};
typedef struct PyPetscPCObject PyPetscPCObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscPC_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":189
 *     cdef PetscPC pc
 * 
 * ctypedef public api class KSP(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscKSP_Type,
 *     object PyPetscKSPObject,
 */
struct PyPetscKSPObject {
  struct PyPetscObjectObject __pyx_base;
  KSP ksp;
};
typedef struct PyPetscKSPObject PyPetscKSPObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscKSP_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":195
 *     cdef PetscKSP ksp
 * 
 * ctypedef public api class SNES(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscSNES_Type,
 *     object PyPetscSNESObject,
 */
struct PyPetscSNESObject {
  struct PyPetscObjectObject __pyx_base;
  SNES snes;
};
typedef struct PyPetscSNESObject PyPetscSNESObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscSNES_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":201
 *     cdef PetscSNES snes
 * 
 * ctypedef public api class TS(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscTS_Type,
 *     object PyPetscTSObject,
 */
struct PyPetscTSObject {
  struct PyPetscObjectObject __pyx_base;
  TS ts;
};
typedef struct PyPetscTSObject PyPetscTSObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscTS_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":207
 *     cdef PetscTS ts
 * 
 * ctypedef public api class TAO(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscTAO_Type,
 *     object PyPetscTAOObject,
 */
struct PyPetscTAOObject {
  struct PyPetscObjectObject __pyx_base;
  Tao tao;
};
typedef struct PyPetscTAOObject PyPetscTAOObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscTAO_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":213
 *     cdef PetscTAO tao
 * 
 * ctypedef public api class AO(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscAO_Type,
 *     object PyPetscAOObject,
 */
struct PyPetscAOObject {
  struct PyPetscObjectObject __pyx_base;
  AO ao;
};
typedef struct PyPetscAOObject PyPetscAOObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscAO_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":219
 *     cdef PetscAO ao
 * 
 * ctypedef public api class DM(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscDM_Type,
 *     object PyPetscDMObject,
 */
struct PyPetscDMObject {
  struct PyPetscObjectObject __pyx_base;
  DM dm;
};
typedef struct PyPetscDMObject PyPetscDMObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscDM_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":225
 *     cdef PetscDM dm
 * 
 * ctypedef public api class DS(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscDS_Type,
 *     object PyPetscDSObject,
 */
struct PyPetscDSObject {
  struct PyPetscObjectObject __pyx_base;
  PetscDS ds;
};
typedef struct PyPetscDSObject PyPetscDSObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscDS_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":231
 *     cdef PetscDS ds
 * 
 * ctypedef public api class Partitioner(Object) [             # <<<<<<<<<<<<<<
 *     type PyPetscPartitioner_Type,
 *     object PyPetscPartitionerObject,
 */
struct PyPetscPartitionerObject {
  struct PyPetscObjectObject __pyx_base;
  PetscPartitioner part;
};
typedef struct PyPetscPartitionerObject PyPetscPartitionerObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscPartitioner_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":237
 *     cdef PetscPartitioner part
 * 
 * ctypedef public api class DMLabel(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscDMLabel_Type,
 *     object PyPetscDMLabelObject,
 */
struct PyPetscDMLabelObject {
  struct PyPetscObjectObject __pyx_base;
  DMLabel dmlabel;
};
typedef struct PyPetscDMLabelObject PyPetscDMLabelObject;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscDMLabel_Type;

/* "pyDASolvers.pyx":98
 * 
 * # create python wrappers that call cpp functions
 * cdef class pyDASolvers:             # <<<<<<<<<<<<<<
 * 
 *     # define a class pointer for cpp functions
 */
struct __pyx_obj_15pyDASolverSolid_pyDASolvers {
  PyObject_HEAD
  Foam::DASolvers *_thisptr;
};


__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscObject_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":99
 *     cdef object base
 * 
 * ctypedef public api class Object [             # <<<<<<<<<<<<<<
 *     type   PyPetscObject_Type,
 *     object PyPetscObjectObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_Object {
  PyObject *(*get_attr)(struct PyPetscObjectObject *, char *);
  PyObject *(*set_attr)(struct PyPetscObjectObject *, char *, PyObject *);
  PyObject *(*get_dict)(struct PyPetscObjectObject *);
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_Object *__pyx_vtabptr_8petsc4py_5PETSc_Object;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscViewer_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":111
 *     cdef object get_dict(self)
 * 
 * ctypedef public api class Viewer(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscViewer_Type,
 *     object PyPetscViewerObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_Viewer {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_Viewer *__pyx_vtabptr_8petsc4py_5PETSc_Viewer;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscRandom_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":117
 *     cdef PetscViewer vwr
 * 
 * ctypedef public api class Random(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscRandom_Type,
 *     object PyPetscRandomObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_Random {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_Random *__pyx_vtabptr_8petsc4py_5PETSc_Random;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscIS_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":123
 *     cdef PetscRandom rnd
 * 
 * ctypedef public api class IS(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscIS_Type,
 *     object PyPetscISObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_IS {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_IS *__pyx_vtabptr_8petsc4py_5PETSc_IS;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscLGMap_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":129
 *     cdef PetscIS iset
 * 
 * ctypedef public api class LGMap(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscLGMap_Type,
 *     object PyPetscLGMapObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_LGMap {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_LGMap *__pyx_vtabptr_8petsc4py_5PETSc_LGMap;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscSF_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":135
 *     cdef PetscLGMap lgm
 * 
 * ctypedef public api class SF(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscSF_Type,
 *     object PyPetscSFObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_SF {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_SF *__pyx_vtabptr_8petsc4py_5PETSc_SF;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscVec_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":141
 *     cdef PetscSF sf
 * 
 * ctypedef public api class Vec(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscVec_Type,
 *     object PyPetscVecObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_Vec {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_Vec *__pyx_vtabptr_8petsc4py_5PETSc_Vec;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscFE_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":147
 *     cdef PetscVec vec
 * 
 * ctypedef public api class FE(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscFE_Type,
 *     object PyPetscFEObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_FE {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_FE *__pyx_vtabptr_8petsc4py_5PETSc_FE;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscQuad_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":153
 *     cdef PetscFE fe
 * 
 * ctypedef public api class Quad(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscQuad_Type,
 *     object PyPetscQuadObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_Quad {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_Quad *__pyx_vtabptr_8petsc4py_5PETSc_Quad;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscScatter_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":159
 *     cdef PetscQuadrature quad
 * 
 * ctypedef public api class Scatter(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscScatter_Type,
 *     object PyPetscScatterObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_Scatter {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_Scatter *__pyx_vtabptr_8petsc4py_5PETSc_Scatter;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscSection_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":165
 *     cdef PetscScatter sct
 * 
 * ctypedef public api class Section(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscSection_Type,
 *     object PyPetscSectionObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_Section {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_Section *__pyx_vtabptr_8petsc4py_5PETSc_Section;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscMat_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":171
 *     cdef PetscSection sec
 * 
 * ctypedef public api class Mat(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscMat_Type,
 *     object PyPetscMatObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_Mat {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_Mat *__pyx_vtabptr_8petsc4py_5PETSc_Mat;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscNullSpace_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":177
 *     cdef PetscMat mat
 * 
 * ctypedef public api class NullSpace(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscNullSpace_Type,
 *     object PyPetscNullSpaceObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_NullSpace {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_NullSpace *__pyx_vtabptr_8petsc4py_5PETSc_NullSpace;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscPC_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":183
 *     cdef PetscNullSpace nsp
 * 
 * ctypedef public api class PC(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscPC_Type,
 *     object PyPetscPCObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_PC {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_PC *__pyx_vtabptr_8petsc4py_5PETSc_PC;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscKSP_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":189
 *     cdef PetscPC pc
 * 
 * ctypedef public api class KSP(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscKSP_Type,
 *     object PyPetscKSPObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_KSP {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_KSP *__pyx_vtabptr_8petsc4py_5PETSc_KSP;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscSNES_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":195
 *     cdef PetscKSP ksp
 * 
 * ctypedef public api class SNES(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscSNES_Type,
 *     object PyPetscSNESObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_SNES {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_SNES *__pyx_vtabptr_8petsc4py_5PETSc_SNES;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscTS_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":201
 *     cdef PetscSNES snes
 * 
 * ctypedef public api class TS(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscTS_Type,
 *     object PyPetscTSObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_TS {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_TS *__pyx_vtabptr_8petsc4py_5PETSc_TS;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscTAO_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":207
 *     cdef PetscTS ts
 * 
 * ctypedef public api class TAO(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscTAO_Type,
 *     object PyPetscTAOObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_TAO {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_TAO *__pyx_vtabptr_8petsc4py_5PETSc_TAO;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscAO_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":213
 *     cdef PetscTAO tao
 * 
 * ctypedef public api class AO(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscAO_Type,
 *     object PyPetscAOObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_AO {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_AO *__pyx_vtabptr_8petsc4py_5PETSc_AO;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscDM_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":219
 *     cdef PetscAO ao
 * 
 * ctypedef public api class DM(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscDM_Type,
 *     object PyPetscDMObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_DM {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_DM *__pyx_vtabptr_8petsc4py_5PETSc_DM;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscDS_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":225
 *     cdef PetscDM dm
 * 
 * ctypedef public api class DS(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscDS_Type,
 *     object PyPetscDSObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_DS {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_DS *__pyx_vtabptr_8petsc4py_5PETSc_DS;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscPartitioner_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":231
 *     cdef PetscDS ds
 * 
 * ctypedef public api class Partitioner(Object) [             # <<<<<<<<<<<<<<
 *     type PyPetscPartitioner_Type,
 *     object PyPetscPartitionerObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_Partitioner {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_Partitioner *__pyx_vtabptr_8petsc4py_5PETSc_Partitioner;

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) PyPetscDMLabel_Type;

/* "../../../../packages/miniconda3/lib/python3.8/site-packages/petsc4py/include/petsc4py/PETSc.pxd":237
 *     cdef PetscPartitioner part
 * 
 * ctypedef public api class DMLabel(Object) [             # <<<<<<<<<<<<<<
 *     type   PyPetscDMLabel_Type,
 *     object PyPetscDMLabelObject,
 */

struct __pyx_vtabstruct_8petsc4py_5PETSc_DMLabel {
  struct __pyx_vtabstruct_8petsc4py_5PETSc_Object __pyx_base;
};
static struct __pyx_vtabstruct_8petsc4py_5PETSc_DMLabel *__pyx_vtabptr_8petsc4py_5PETSc_DMLabel;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'petsc4py.PETSc' */
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_Comm = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_Object = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_Viewer = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_Random = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_IS = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_LGMap = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_SF = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_Vec = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_FE = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_Quad = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_Scatter = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_Section = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_Mat = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_NullSpace = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_PC = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_KSP = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_SNES = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_TS = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_TAO = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_AO = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_DM = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_DS = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_Partitioner = 0;
static PyTypeObject *__pyx_ptype_8petsc4py_5PETSc_DMLabel = 0;

/* Module declarations from 'pyDASolverSolid' */
static PyTypeObject *__pyx_ptype_15pyDASolverSolid_pyDASolvers = 0;
#define __Pyx_MODULE_NAME "pyDASolverSolid"
extern int __pyx_module_is_main_pyDASolverSolid;
int __pyx_module_is_main_pyDASolverSolid = 0;

/* Implementation of 'pyDASolverSolid' */
static PyObject *__pyx_builtin_TypeError;
static const char __pyx_k_c[] = "c";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_fX[] = "fX";
static const char __pyx_k_fY[] = "fY";
static const char __pyx_k_fZ[] = "fZ";
static const char __pyx_k_xv[] = "xv";
static const char __pyx_k_psi[] = "psi";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_dFdW[] = "dFdW";
static const char __pyx_k_isPC[] = "isPC";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_prod[] = "prod";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_wVec[] = "wVec";
static const char __pyx_k_compI[] = "compI";
static const char __pyx_k_dFdBC[] = "dFdBC";
static const char __pyx_k_dFdXv[] = "dFdXv";
static const char __pyx_k_dRdBC[] = "dRdBC";
static const char __pyx_k_dRdWT[] = "dRdWT";
static const char __pyx_k_magIn[] = "magIn";
static const char __pyx_k_myKSP[] = "myKSP";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_vecIn[] = "vecIn";
static const char __pyx_k_xvVec[] = "xvVec";
static const char __pyx_k_aForce[] = "aForce";
static const char __pyx_k_center[] = "center";
static const char __pyx_k_coordI[] = "coordI";
static const char __pyx_k_dFdACT[] = "dFdACT";
static const char __pyx_k_dFdAOA[] = "dFdAOA";
static const char __pyx_k_dFdFFD[] = "dFdFFD";
static const char __pyx_k_dRdACT[] = "dRdACT";
static const char __pyx_k_dRdAOA[] = "dRdAOA";
static const char __pyx_k_dRdFFD[] = "dRdFFD";
static const char __pyx_k_jacMat[] = "jacMat";
static const char __pyx_k_mpiVec[] = "mpiVec";
static const char __pyx_k_pointI[] = "pointI";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_psiVec[] = "psiVec";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_rhsVec[] = "rhsVec";
static const char __pyx_k_seqVec[] = "seqVec";
static const char __pyx_k_solVec[] = "solVec";
static const char __pyx_k_tForce[] = "tForce";
static const char __pyx_k_argsAll[] = "argsAll";
static const char __pyx_k_fBarVec[] = "fBarVec";
static const char __pyx_k_timeVec[] = "timeVec";
static const char __pyx_k_dFdField[] = "dFdField";
static const char __pyx_k_dForcedW[] = "dForcedW";
static const char __pyx_k_dRdWTPsi[] = "dRdWTPsi";
static const char __pyx_k_fvSource[] = "fvSource";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_jacPCMat[] = "jacPCMat";
static const char __pyx_k_rDistExt[] = "rDistExt";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_stateMat[] = "stateMat";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_dForcedXv[] = "dForcedXv";
static const char __pyx_k_dRdBCTPsi[] = "dRdBCTPsi";
static const char __pyx_k_dRdXvTPsi[] = "dRdXvTPsi";
static const char __pyx_k_fieldName[] = "fieldName";
static const char __pyx_k_fieldType[] = "fieldType";
static const char __pyx_k_instanceI[] = "instanceI";
static const char __pyx_k_pointList[] = "pointList";
static const char __pyx_k_pyOptions[] = "pyOptions";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_dRdAOATPsi[] = "dRdAOATPsi";
static const char __pyx_k_dRdActTPsi[] = "dRdActTPsi";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_stateBCMat[] = "stateBCMat";
static const char __pyx_k_timeIdxVec[] = "timeIdxVec";
static const char __pyx_k_dRdWOldTPsi[] = "dRdWOldTPsi";
static const char __pyx_k_globalCellI[] = "globalCellI";
static const char __pyx_k_objFuncName[] = "objFuncName";
static const char __pyx_k_pyDASolvers[] = "pyDASolvers";
static const char __pyx_k_targetForce[] = "targetForce";
static const char __pyx_k_dRdFieldTPsi[] = "dRdFieldTPsi";
static const char __pyx_k_forceProfile[] = "forceProfile";
static const char __pyx_k_oldTimeLevel[] = "oldTimeLevel";
static const char __pyx_k_designVarName[] = "designVarName";
static const char __pyx_k_designVarType[] = "designVarType";
static const char __pyx_k_radiusProfile[] = "radiusProfile";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_DAFoam_Discrete_Adjoint_with_Op[] = "\n    DAFoam  : Discrete Adjoint with OpenFOAM\n    Version : v3\n\n    Description:\n        Cython wrapper functions that call OpenFOAM libraries defined\n        in the *.C and *.H files. The python naming convention is to\n        add \"py\" before the C++ class name\n";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_aForce;
static PyObject *__pyx_n_s_argsAll;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_center;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_compI;
static PyObject *__pyx_n_s_coordI;
static PyObject *__pyx_n_s_dFdACT;
static PyObject *__pyx_n_s_dFdAOA;
static PyObject *__pyx_n_s_dFdBC;
static PyObject *__pyx_n_s_dFdFFD;
static PyObject *__pyx_n_s_dFdField;
static PyObject *__pyx_n_s_dFdW;
static PyObject *__pyx_n_s_dFdXv;
static PyObject *__pyx_n_s_dForcedW;
static PyObject *__pyx_n_s_dForcedXv;
static PyObject *__pyx_n_s_dRdACT;
static PyObject *__pyx_n_s_dRdAOA;
static PyObject *__pyx_n_s_dRdAOATPsi;
static PyObject *__pyx_n_s_dRdActTPsi;
static PyObject *__pyx_n_s_dRdBC;
static PyObject *__pyx_n_s_dRdBCTPsi;
static PyObject *__pyx_n_s_dRdFFD;
static PyObject *__pyx_n_s_dRdFieldTPsi;
static PyObject *__pyx_n_s_dRdWOldTPsi;
static PyObject *__pyx_n_s_dRdWT;
static PyObject *__pyx_n_s_dRdWTPsi;
static PyObject *__pyx_n_s_dRdXvTPsi;
static PyObject *__pyx_n_s_designVarName;
static PyObject *__pyx_n_s_designVarType;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_fBarVec;
static PyObject *__pyx_n_s_fX;
static PyObject *__pyx_n_s_fY;
static PyObject *__pyx_n_s_fZ;
static PyObject *__pyx_n_s_fieldName;
static PyObject *__pyx_n_s_fieldType;
static PyObject *__pyx_n_s_forceProfile;
static PyObject *__pyx_n_s_fvSource;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_globalCellI;
static PyObject *__pyx_n_s_instanceI;
static PyObject *__pyx_n_s_isPC;
static PyObject *__pyx_n_s_jacMat;
static PyObject *__pyx_n_s_jacPCMat;
static PyObject *__pyx_n_s_magIn;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_mpiVec;
static PyObject *__pyx_n_s_myKSP;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_objFuncName;
static PyObject *__pyx_n_s_oldTimeLevel;
static PyObject *__pyx_n_s_pointI;
static PyObject *__pyx_n_s_pointList;
static PyObject *__pyx_n_s_prefix;
static PyObject *__pyx_n_s_prod;
static PyObject *__pyx_n_s_psi;
static PyObject *__pyx_n_s_psiVec;
static PyObject *__pyx_n_s_pyDASolvers;
static PyObject *__pyx_n_s_pyOptions;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_rDistExt;
static PyObject *__pyx_n_s_radiusProfile;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_rhsVec;
static PyObject *__pyx_n_s_seqVec;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_solVec;
static PyObject *__pyx_n_s_state;
static PyObject *__pyx_n_s_stateBCMat;
static PyObject *__pyx_n_s_stateMat;
static PyObject *__pyx_n_s_tForce;
static PyObject *__pyx_n_s_targetForce;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_timeIdxVec;
static PyObject *__pyx_n_s_timeVec;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_vecIn;
static PyObject *__pyx_n_s_wVec;
static PyObject *__pyx_n_s_xv;
static PyObject *__pyx_n_s_xvVec;
static int __pyx_pf_15pyDASolverSolid_11pyDASolvers___cinit__(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self); /* proto */
static void __pyx_pf_15pyDASolverSolid_11pyDASolvers_2__dealloc__(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self); /* proto */
static int __pyx_pf_15pyDASolverSolid_11pyDASolvers_4__init__(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_argsAll, PyObject *__pyx_v_pyOptions); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_6initSolver(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_8solvePrimal(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_10calcdRdWT(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_isPC, struct PyPetscMatObject *__pyx_v_dRdWT); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_12calcdRdWTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_psi, struct PyPetscVecObject *__pyx_v_dRdWTPsi); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_14initializedRdWTMatrixFree(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_16destroydRdWTMatrixFree(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_18calcdFdW(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, struct PyPetscVecObject *__pyx_v_dFdW); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_20calcdFdWAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, struct PyPetscVecObject *__pyx_v_dFdW); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_22createMLRKSP(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscMatObject *__pyx_v_jacMat, struct PyPetscMatObject *__pyx_v_jacPCMat, struct PyPetscKSPObject *__pyx_v_myKSP); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_24createMLRKSPMatrixFree(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscMatObject *__pyx_v_jacPCMat, struct PyPetscKSPObject *__pyx_v_myKSP); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_26solveLinearEqn(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscKSPObject *__pyx_v_myKSP, struct PyPetscVecObject *__pyx_v_rhsVec, struct PyPetscVecObject *__pyx_v_solVec); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_28calcdRdBC(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_designVarName, struct PyPetscMatObject *__pyx_v_dRdBC); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_30calcdFdBC(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dFdBC); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_32calcdFdBCAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dFdBC); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_34calcdRdAOA(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_designVarName, struct PyPetscMatObject *__pyx_v_dRdAOA); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_36calcdFdAOA(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dFdAOA); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_38calcdRdFFD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_designVarName, struct PyPetscMatObject *__pyx_v_dRdFFD); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_40calcdRdXvTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_psi, struct PyPetscVecObject *__pyx_v_dRdXvTPsi); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_42calcdForcedXvAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_fBarVec, struct PyPetscVecObject *__pyx_v_dForcedXv); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_44calcdRdActTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_psi, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dRdActTPsi); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_46calcdForcedWAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_fBarVec, struct PyPetscVecObject *__pyx_v_dForcedW); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_48calcdFdACTAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dFdACT); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_50calcdFdACT(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, PyObject *__pyx_v_designVarType, struct PyPetscVecObject *__pyx_v_dFdACT); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_52calcdRdAOATPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_psi, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dRdAOATPsi); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_54calcdRdBCTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_psi, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dRdBCTPsi); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_56calcdFdFFD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dFdFFD); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_58calcdFdXvAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dFdXv); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_60calcdRdACT(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_designVarName, PyObject *__pyx_v_designVarType, struct PyPetscMatObject *__pyx_v_dRdACT); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_62calcdRdFieldTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_psiVec, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dRdFieldTPsi); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_64calcdFdFieldAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dFdField); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_66calcdRdWOldTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_oldTimeLevel, struct PyPetscVecObject *__pyx_v_psi, struct PyPetscVecObject *__pyx_v_dRdWOldTPsi); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_68convertMPIVec2SeqVec(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_mpiVec, struct PyPetscVecObject *__pyx_v_seqVec); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_70syncDAOptionToActuatorDVs(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_72updateOFField(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_wVec); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_74updateOFMesh(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_76setdXvdFFDMat(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscMatObject *__pyx_v_dXvdFFDMat); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_78setFFD2XvSeedVec(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_FFD2XvSeedVec); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_80getGlobalXvIndex(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_pointI, PyObject *__pyx_v_coordI); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_82ofField2StateVec(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_stateVec); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_84stateVec2OFField(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_stateVec); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_86pointVec2OFMesh(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_88ofMesh2PointVec(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_90resVec2OFResField(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_rVec); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_92ofResField2ResVec(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_rVec); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_94getNLocalAdjointStates(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_96getNLocalAdjointBoundaryStates(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_98getNLocalCells(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_100checkMesh(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_102getObjFuncValue(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_objFuncName); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_104getForces(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_fX, struct PyPetscVecObject *__pyx_v_fY, struct PyPetscVecObject *__pyx_v_fZ, struct PyPetscVecObject *__pyx_v_pointList); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_106printAllOptions(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_108updateDAOption(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_pyOptions); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_110getPrevPrimalSolTime(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_112writeMatrixBinary(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscMatObject *__pyx_v_magIn, PyObject *__pyx_v_prefix); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_114writeMatrixASCII(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscMatObject *__pyx_v_magIn, PyObject *__pyx_v_prefix); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_116readMatrixBinary(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscMatObject *__pyx_v_magIn, PyObject *__pyx_v_prefix); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_118writeVectorASCII(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_vecIn, PyObject *__pyx_v_prefix); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_120readVectorBinary(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_vecIn, PyObject *__pyx_v_prefix); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_122writeVectorBinary(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_vecIn, PyObject *__pyx_v_prefix); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_124setTimeInstanceField(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_instanceI); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_126setTimeInstanceVar(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_mode, struct PyPetscMatObject *__pyx_v_stateMat, struct PyPetscMatObject *__pyx_v_stateBCMat, struct PyPetscVecObject *__pyx_v_timeVec, struct PyPetscVecObject *__pyx_v_timeIdxVec); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_128getTimeInstanceObjFunc(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_instanceI, PyObject *__pyx_v_objFuncName); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_130setFieldValue4GlobalCellI(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_fieldName, PyObject *__pyx_v_val, PyObject *__pyx_v_globalCellI, PyObject *__pyx_v_compI); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_132updateBoundaryConditions(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_fieldName, PyObject *__pyx_v_fieldType); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_134calcPrimalResidualStatistics(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_136getForwardADDerivVal(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_objFuncName); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_138calcResidualVec(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_resVec); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_140setPrimalBoundaryConditions(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_printInfo); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_142calcFvSource(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_aForce, struct PyPetscVecObject *__pyx_v_tForce, struct PyPetscVecObject *__pyx_v_rDistExt, struct PyPetscVecObject *__pyx_v_targetForce, struct PyPetscVecObject *__pyx_v_center, struct PyPetscVecObject *__pyx_v_fvSource); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_144calcdFvSourcedInputsTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_mode, struct PyPetscVecObject *__pyx_v_c, struct PyPetscVecObject *__pyx_v_r, struct PyPetscVecObject *__pyx_v_f, struct PyPetscVecObject *__pyx_v_psi, struct PyPetscVecObject *__pyx_v_prod); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_146calcForceProfile(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xv, struct PyPetscVecObject *__pyx_v_state, struct PyPetscVecObject *__pyx_v_forceProfile, struct PyPetscVecObject *__pyx_v_radiusProfile); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_148calcdForcedStateTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_mode, struct PyPetscVecObject *__pyx_v_xv, struct PyPetscVecObject *__pyx_v_state, struct PyPetscVecObject *__pyx_v_psi, struct PyPetscVecObject *__pyx_v_prod); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_150runFPAdj(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_dFdW, struct PyPetscVecObject *__pyx_v_psi); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_152__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_154__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_15pyDASolverSolid_pyDASolvers(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
/* Late includes */

/* "pyDASolvers.pyx":105
 * 
 *     # initialize this class pointer with NULL
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_15pyDASolverSolid_11pyDASolvers_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_15pyDASolverSolid_11pyDASolvers_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers___cinit__(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15pyDASolverSolid_11pyDASolvers___cinit__(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyDASolvers.pyx":106
 *     # initialize this class pointer with NULL
 *     def __cinit__(self):
 *         self._thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     # deallocate the class pointer, and
 */
  __pyx_v_self->_thisptr = NULL;

  /* "pyDASolvers.pyx":105
 * 
 *     # initialize this class pointer with NULL
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":110
 *     # deallocate the class pointer, and
 *     # make sure we don't have memory leak
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

/* Python wrapper */
static void __pyx_pw_15pyDASolverSolid_11pyDASolvers_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_15pyDASolverSolid_11pyDASolvers_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_15pyDASolverSolid_11pyDASolvers_2__dealloc__(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_15pyDASolverSolid_11pyDASolvers_2__dealloc__(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyDASolvers.pyx":111
 *     # make sure we don't have memory leak
 *     def __dealloc__(self):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->_thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "pyDASolvers.pyx":112
 *     def __dealloc__(self):
 *         if self._thisptr != NULL:
 *             del self._thisptr             # <<<<<<<<<<<<<<
 * 
 *     # point the class pointer to the cpp class constructor
 */
    delete __pyx_v_self->_thisptr;

    /* "pyDASolvers.pyx":111
 *     # make sure we don't have memory leak
 *     def __dealloc__(self):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 * 
 */
  }

  /* "pyDASolvers.pyx":110
 *     # deallocate the class pointer, and
 *     # make sure we don't have memory leak
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pyDASolvers.pyx":115
 * 
 *     # point the class pointer to the cpp class constructor
 *     def __init__(self, argsAll, pyOptions):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */

/* Python wrapper */
static int __pyx_pw_15pyDASolverSolid_11pyDASolvers_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_15pyDASolverSolid_11pyDASolvers_4__init__[] = "\n        Parameters\n        ----------\n\n        argsAll: char\n            Chars that contains all the arguments\n            for running OpenFOAM solvers, including\n            the name of the solver.\n\n        pyOptions: dict\n            Dictionary that defines all the options\n            in DAFoam\n\n        Examples\n        --------\n        solver = pyDASolvers(\"DASolvers -parallel -python\", aeroOptions)\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_15pyDASolverSolid_11pyDASolvers_4__init__;
#endif
static int __pyx_pw_15pyDASolverSolid_11pyDASolvers_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_argsAll = 0;
  PyObject *__pyx_v_pyOptions = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_argsAll,&__pyx_n_s_pyOptions,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_argsAll)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyOptions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(1, 115, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 115, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_argsAll = values[0];
    __pyx_v_pyOptions = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 115, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_4__init__(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_argsAll, __pyx_v_pyOptions);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_15pyDASolverSolid_11pyDASolvers_4__init__(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_argsAll, PyObject *__pyx_v_pyOptions) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Foam::DASolvers *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pyDASolvers.pyx":133
 *         solver = pyDASolvers("DASolvers -parallel -python", aeroOptions)
 *         """
 *         self._thisptr = new DASolvers(argsAll, pyOptions)             # <<<<<<<<<<<<<<
 * 
 *     # wrap all the other member functions in the cpp class
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_argsAll); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 133, __pyx_L1_error)
  try {
    __pyx_t_2 = new Foam::DASolvers(__pyx_t_1, __pyx_v_pyOptions);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 133, __pyx_L1_error)
  }
  __pyx_v_self->_thisptr = __pyx_t_2;

  /* "pyDASolvers.pyx":115
 * 
 *     # point the class pointer to the cpp class constructor
 *     def __init__(self, argsAll, pyOptions):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":136
 * 
 *     # wrap all the other member functions in the cpp class
 *     def initSolver(self):             # <<<<<<<<<<<<<<
 *         self._thisptr.initSolver()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_7initSolver(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_7initSolver(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initSolver (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_6initSolver(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_6initSolver(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initSolver", 0);

  /* "pyDASolvers.pyx":137
 *     # wrap all the other member functions in the cpp class
 *     def initSolver(self):
 *         self._thisptr.initSolver()             # <<<<<<<<<<<<<<
 * 
 *     def solvePrimal(self, Vec xvVec, Vec wVec):
 */
  __pyx_v_self->_thisptr->initSolver();

  /* "pyDASolvers.pyx":136
 * 
 *     # wrap all the other member functions in the cpp class
 *     def initSolver(self):             # <<<<<<<<<<<<<<
 *         self._thisptr.initSolver()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":139
 *         self._thisptr.initSolver()
 * 
 *     def solvePrimal(self, Vec xvVec, Vec wVec):             # <<<<<<<<<<<<<<
 *         return self._thisptr.solvePrimal(xvVec.vec, wVec.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_9solvePrimal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_9solvePrimal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solvePrimal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solvePrimal", 1, 2, 2, 1); __PYX_ERR(1, 139, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "solvePrimal") < 0)) __PYX_ERR(1, 139, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("solvePrimal", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 139, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.solvePrimal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 139, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 139, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_8solvePrimal(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_8solvePrimal(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solvePrimal", 0);

  /* "pyDASolvers.pyx":140
 * 
 *     def solvePrimal(self, Vec xvVec, Vec wVec):
 *         return self._thisptr.solvePrimal(xvVec.vec, wVec.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdRdWT(self, Vec xvVec, Vec wVec, isPC, Mat dRdWT):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_thisptr->solvePrimal(__pyx_v_xvVec->vec, __pyx_v_wVec->vec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyDASolvers.pyx":139
 *         self._thisptr.initSolver()
 * 
 *     def solvePrimal(self, Vec xvVec, Vec wVec):             # <<<<<<<<<<<<<<
 *         return self._thisptr.solvePrimal(xvVec.vec, wVec.vec)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.solvePrimal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":142
 *         return self._thisptr.solvePrimal(xvVec.vec, wVec.vec)
 * 
 *     def calcdRdWT(self, Vec xvVec, Vec wVec, isPC, Mat dRdWT):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdWT(xvVec.vec, wVec.vec, isPC, dRdWT.mat)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_11calcdRdWT(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_11calcdRdWT(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  PyObject *__pyx_v_isPC = 0;
  struct PyPetscMatObject *__pyx_v_dRdWT = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdRdWT (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_isPC,&__pyx_n_s_dRdWT,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdWT", 1, 4, 4, 1); __PYX_ERR(1, 142, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isPC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdWT", 1, 4, 4, 2); __PYX_ERR(1, 142, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dRdWT)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdWT", 1, 4, 4, 3); __PYX_ERR(1, 142, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdRdWT") < 0)) __PYX_ERR(1, 142, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_isPC = values[2];
    __pyx_v_dRdWT = ((struct PyPetscMatObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdRdWT", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 142, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdWT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 142, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 142, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dRdWT), __pyx_ptype_8petsc4py_5PETSc_Mat, 1, "dRdWT", 0))) __PYX_ERR(1, 142, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_10calcdRdWT(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_isPC, __pyx_v_dRdWT);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_10calcdRdWT(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_isPC, struct PyPetscMatObject *__pyx_v_dRdWT) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdRdWT", 0);

  /* "pyDASolvers.pyx":143
 * 
 *     def calcdRdWT(self, Vec xvVec, Vec wVec, isPC, Mat dRdWT):
 *         self._thisptr.calcdRdWT(xvVec.vec, wVec.vec, isPC, dRdWT.mat)             # <<<<<<<<<<<<<<
 * 
 *     def calcdRdWTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, Vec dRdWTPsi):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_isPC); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 143, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdRdWT(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_t_1, __pyx_v_dRdWT->mat);

  /* "pyDASolvers.pyx":142
 *         return self._thisptr.solvePrimal(xvVec.vec, wVec.vec)
 * 
 *     def calcdRdWT(self, Vec xvVec, Vec wVec, isPC, Mat dRdWT):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdWT(xvVec.vec, wVec.vec, isPC, dRdWT.mat)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdWT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":145
 *         self._thisptr.calcdRdWT(xvVec.vec, wVec.vec, isPC, dRdWT.mat)
 * 
 *     def calcdRdWTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, Vec dRdWTPsi):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdWTPsiAD(xvVec.vec, wVec.vec, psi.vec, dRdWTPsi.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_13calcdRdWTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_13calcdRdWTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  struct PyPetscVecObject *__pyx_v_psi = 0;
  struct PyPetscVecObject *__pyx_v_dRdWTPsi = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdRdWTPsiAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_psi,&__pyx_n_s_dRdWTPsi,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdWTPsiAD", 1, 4, 4, 1); __PYX_ERR(1, 145, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_psi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdWTPsiAD", 1, 4, 4, 2); __PYX_ERR(1, 145, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dRdWTPsi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdWTPsiAD", 1, 4, 4, 3); __PYX_ERR(1, 145, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdRdWTPsiAD") < 0)) __PYX_ERR(1, 145, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_psi = ((struct PyPetscVecObject *)values[2]);
    __pyx_v_dRdWTPsi = ((struct PyPetscVecObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdRdWTPsiAD", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 145, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdWTPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 145, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 145, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_psi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "psi", 0))) __PYX_ERR(1, 145, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dRdWTPsi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dRdWTPsi", 0))) __PYX_ERR(1, 145, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_12calcdRdWTPsiAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_psi, __pyx_v_dRdWTPsi);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_12calcdRdWTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_psi, struct PyPetscVecObject *__pyx_v_dRdWTPsi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdRdWTPsiAD", 0);

  /* "pyDASolvers.pyx":146
 * 
 *     def calcdRdWTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, Vec dRdWTPsi):
 *         self._thisptr.calcdRdWTPsiAD(xvVec.vec, wVec.vec, psi.vec, dRdWTPsi.vec)             # <<<<<<<<<<<<<<
 * 
 *     def initializedRdWTMatrixFree(self, Vec xvVec, Vec wVec):
 */
  __pyx_v_self->_thisptr->calcdRdWTPsiAD(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_v_psi->vec, __pyx_v_dRdWTPsi->vec);

  /* "pyDASolvers.pyx":145
 *         self._thisptr.calcdRdWT(xvVec.vec, wVec.vec, isPC, dRdWT.mat)
 * 
 *     def calcdRdWTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, Vec dRdWTPsi):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdWTPsiAD(xvVec.vec, wVec.vec, psi.vec, dRdWTPsi.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":148
 *         self._thisptr.calcdRdWTPsiAD(xvVec.vec, wVec.vec, psi.vec, dRdWTPsi.vec)
 * 
 *     def initializedRdWTMatrixFree(self, Vec xvVec, Vec wVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.initializedRdWTMatrixFree(xvVec.vec, wVec.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_15initializedRdWTMatrixFree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_15initializedRdWTMatrixFree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializedRdWTMatrixFree (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initializedRdWTMatrixFree", 1, 2, 2, 1); __PYX_ERR(1, 148, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initializedRdWTMatrixFree") < 0)) __PYX_ERR(1, 148, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initializedRdWTMatrixFree", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 148, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.initializedRdWTMatrixFree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 148, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 148, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_14initializedRdWTMatrixFree(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_14initializedRdWTMatrixFree(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initializedRdWTMatrixFree", 0);

  /* "pyDASolvers.pyx":149
 * 
 *     def initializedRdWTMatrixFree(self, Vec xvVec, Vec wVec):
 *         self._thisptr.initializedRdWTMatrixFree(xvVec.vec, wVec.vec)             # <<<<<<<<<<<<<<
 * 
 *     def destroydRdWTMatrixFree(self):
 */
  __pyx_v_self->_thisptr->initializedRdWTMatrixFree(__pyx_v_xvVec->vec, __pyx_v_wVec->vec);

  /* "pyDASolvers.pyx":148
 *         self._thisptr.calcdRdWTPsiAD(xvVec.vec, wVec.vec, psi.vec, dRdWTPsi.vec)
 * 
 *     def initializedRdWTMatrixFree(self, Vec xvVec, Vec wVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.initializedRdWTMatrixFree(xvVec.vec, wVec.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":151
 *         self._thisptr.initializedRdWTMatrixFree(xvVec.vec, wVec.vec)
 * 
 *     def destroydRdWTMatrixFree(self):             # <<<<<<<<<<<<<<
 *         self._thisptr.destroydRdWTMatrixFree()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_17destroydRdWTMatrixFree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_17destroydRdWTMatrixFree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroydRdWTMatrixFree (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_16destroydRdWTMatrixFree(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_16destroydRdWTMatrixFree(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroydRdWTMatrixFree", 0);

  /* "pyDASolvers.pyx":152
 * 
 *     def destroydRdWTMatrixFree(self):
 *         self._thisptr.destroydRdWTMatrixFree()             # <<<<<<<<<<<<<<
 * 
 *     def calcdFdW(self, Vec xvVec, Vec wVec, objFuncName, Vec dFdW):
 */
  __pyx_v_self->_thisptr->destroydRdWTMatrixFree();

  /* "pyDASolvers.pyx":151
 *         self._thisptr.initializedRdWTMatrixFree(xvVec.vec, wVec.vec)
 * 
 *     def destroydRdWTMatrixFree(self):             # <<<<<<<<<<<<<<
 *         self._thisptr.destroydRdWTMatrixFree()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":154
 *         self._thisptr.destroydRdWTMatrixFree()
 * 
 *     def calcdFdW(self, Vec xvVec, Vec wVec, objFuncName, Vec dFdW):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdW(xvVec.vec, wVec.vec, objFuncName, dFdW.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_19calcdFdW(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_19calcdFdW(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  PyObject *__pyx_v_objFuncName = 0;
  struct PyPetscVecObject *__pyx_v_dFdW = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdFdW (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_objFuncName,&__pyx_n_s_dFdW,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdW", 1, 4, 4, 1); __PYX_ERR(1, 154, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objFuncName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdW", 1, 4, 4, 2); __PYX_ERR(1, 154, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dFdW)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdW", 1, 4, 4, 3); __PYX_ERR(1, 154, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdFdW") < 0)) __PYX_ERR(1, 154, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_objFuncName = values[2];
    __pyx_v_dFdW = ((struct PyPetscVecObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdFdW", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 154, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdW", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 154, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 154, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dFdW), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dFdW", 0))) __PYX_ERR(1, 154, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_18calcdFdW(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_objFuncName, __pyx_v_dFdW);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_18calcdFdW(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, struct PyPetscVecObject *__pyx_v_dFdW) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdFdW", 0);

  /* "pyDASolvers.pyx":155
 * 
 *     def calcdFdW(self, Vec xvVec, Vec wVec, objFuncName, Vec dFdW):
 *         self._thisptr.calcdFdW(xvVec.vec, wVec.vec, objFuncName, dFdW.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdFdWAD(self, Vec xvVec, Vec wVec, objFuncName, Vec dFdW):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_objFuncName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 155, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdFdW(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_t_1, __pyx_v_dFdW->vec);

  /* "pyDASolvers.pyx":154
 *         self._thisptr.destroydRdWTMatrixFree()
 * 
 *     def calcdFdW(self, Vec xvVec, Vec wVec, objFuncName, Vec dFdW):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdW(xvVec.vec, wVec.vec, objFuncName, dFdW.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdW", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":157
 *         self._thisptr.calcdFdW(xvVec.vec, wVec.vec, objFuncName, dFdW.vec)
 * 
 *     def calcdFdWAD(self, Vec xvVec, Vec wVec, objFuncName, Vec dFdW):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdWAD(xvVec.vec, wVec.vec, objFuncName, dFdW.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_21calcdFdWAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_21calcdFdWAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  PyObject *__pyx_v_objFuncName = 0;
  struct PyPetscVecObject *__pyx_v_dFdW = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdFdWAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_objFuncName,&__pyx_n_s_dFdW,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdWAD", 1, 4, 4, 1); __PYX_ERR(1, 157, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objFuncName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdWAD", 1, 4, 4, 2); __PYX_ERR(1, 157, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dFdW)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdWAD", 1, 4, 4, 3); __PYX_ERR(1, 157, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdFdWAD") < 0)) __PYX_ERR(1, 157, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_objFuncName = values[2];
    __pyx_v_dFdW = ((struct PyPetscVecObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdFdWAD", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 157, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdWAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 157, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 157, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dFdW), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dFdW", 0))) __PYX_ERR(1, 157, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_20calcdFdWAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_objFuncName, __pyx_v_dFdW);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_20calcdFdWAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, struct PyPetscVecObject *__pyx_v_dFdW) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdFdWAD", 0);

  /* "pyDASolvers.pyx":158
 * 
 *     def calcdFdWAD(self, Vec xvVec, Vec wVec, objFuncName, Vec dFdW):
 *         self._thisptr.calcdFdWAD(xvVec.vec, wVec.vec, objFuncName, dFdW.vec)             # <<<<<<<<<<<<<<
 * 
 *     def createMLRKSP(self, Mat jacMat, Mat jacPCMat, KSP myKSP):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_objFuncName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 158, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdFdWAD(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_t_1, __pyx_v_dFdW->vec);

  /* "pyDASolvers.pyx":157
 *         self._thisptr.calcdFdW(xvVec.vec, wVec.vec, objFuncName, dFdW.vec)
 * 
 *     def calcdFdWAD(self, Vec xvVec, Vec wVec, objFuncName, Vec dFdW):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdWAD(xvVec.vec, wVec.vec, objFuncName, dFdW.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdWAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":160
 *         self._thisptr.calcdFdWAD(xvVec.vec, wVec.vec, objFuncName, dFdW.vec)
 * 
 *     def createMLRKSP(self, Mat jacMat, Mat jacPCMat, KSP myKSP):             # <<<<<<<<<<<<<<
 *         self._thisptr.createMLRKSP(jacMat.mat, jacPCMat.mat, myKSP.ksp)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_23createMLRKSP(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_23createMLRKSP(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscMatObject *__pyx_v_jacMat = 0;
  struct PyPetscMatObject *__pyx_v_jacPCMat = 0;
  struct PyPetscKSPObject *__pyx_v_myKSP = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createMLRKSP (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_jacMat,&__pyx_n_s_jacPCMat,&__pyx_n_s_myKSP,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jacMat)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jacPCMat)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("createMLRKSP", 1, 3, 3, 1); __PYX_ERR(1, 160, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_myKSP)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("createMLRKSP", 1, 3, 3, 2); __PYX_ERR(1, 160, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "createMLRKSP") < 0)) __PYX_ERR(1, 160, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_jacMat = ((struct PyPetscMatObject *)values[0]);
    __pyx_v_jacPCMat = ((struct PyPetscMatObject *)values[1]);
    __pyx_v_myKSP = ((struct PyPetscKSPObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("createMLRKSP", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 160, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.createMLRKSP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_jacMat), __pyx_ptype_8petsc4py_5PETSc_Mat, 1, "jacMat", 0))) __PYX_ERR(1, 160, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_jacPCMat), __pyx_ptype_8petsc4py_5PETSc_Mat, 1, "jacPCMat", 0))) __PYX_ERR(1, 160, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_myKSP), __pyx_ptype_8petsc4py_5PETSc_KSP, 1, "myKSP", 0))) __PYX_ERR(1, 160, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_22createMLRKSP(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_jacMat, __pyx_v_jacPCMat, __pyx_v_myKSP);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_22createMLRKSP(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscMatObject *__pyx_v_jacMat, struct PyPetscMatObject *__pyx_v_jacPCMat, struct PyPetscKSPObject *__pyx_v_myKSP) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createMLRKSP", 0);

  /* "pyDASolvers.pyx":161
 * 
 *     def createMLRKSP(self, Mat jacMat, Mat jacPCMat, KSP myKSP):
 *         self._thisptr.createMLRKSP(jacMat.mat, jacPCMat.mat, myKSP.ksp)             # <<<<<<<<<<<<<<
 * 
 *     def createMLRKSPMatrixFree(self, Mat jacPCMat, KSP myKSP):
 */
  __pyx_v_self->_thisptr->createMLRKSP(__pyx_v_jacMat->mat, __pyx_v_jacPCMat->mat, __pyx_v_myKSP->ksp);

  /* "pyDASolvers.pyx":160
 *         self._thisptr.calcdFdWAD(xvVec.vec, wVec.vec, objFuncName, dFdW.vec)
 * 
 *     def createMLRKSP(self, Mat jacMat, Mat jacPCMat, KSP myKSP):             # <<<<<<<<<<<<<<
 *         self._thisptr.createMLRKSP(jacMat.mat, jacPCMat.mat, myKSP.ksp)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":163
 *         self._thisptr.createMLRKSP(jacMat.mat, jacPCMat.mat, myKSP.ksp)
 * 
 *     def createMLRKSPMatrixFree(self, Mat jacPCMat, KSP myKSP):             # <<<<<<<<<<<<<<
 *         self._thisptr.createMLRKSPMatrixFree(jacPCMat.mat, myKSP.ksp)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_25createMLRKSPMatrixFree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_25createMLRKSPMatrixFree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscMatObject *__pyx_v_jacPCMat = 0;
  struct PyPetscKSPObject *__pyx_v_myKSP = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createMLRKSPMatrixFree (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_jacPCMat,&__pyx_n_s_myKSP,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jacPCMat)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_myKSP)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("createMLRKSPMatrixFree", 1, 2, 2, 1); __PYX_ERR(1, 163, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "createMLRKSPMatrixFree") < 0)) __PYX_ERR(1, 163, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_jacPCMat = ((struct PyPetscMatObject *)values[0]);
    __pyx_v_myKSP = ((struct PyPetscKSPObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("createMLRKSPMatrixFree", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 163, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.createMLRKSPMatrixFree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_jacPCMat), __pyx_ptype_8petsc4py_5PETSc_Mat, 1, "jacPCMat", 0))) __PYX_ERR(1, 163, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_myKSP), __pyx_ptype_8petsc4py_5PETSc_KSP, 1, "myKSP", 0))) __PYX_ERR(1, 163, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_24createMLRKSPMatrixFree(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_jacPCMat, __pyx_v_myKSP);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_24createMLRKSPMatrixFree(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscMatObject *__pyx_v_jacPCMat, struct PyPetscKSPObject *__pyx_v_myKSP) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createMLRKSPMatrixFree", 0);

  /* "pyDASolvers.pyx":164
 * 
 *     def createMLRKSPMatrixFree(self, Mat jacPCMat, KSP myKSP):
 *         self._thisptr.createMLRKSPMatrixFree(jacPCMat.mat, myKSP.ksp)             # <<<<<<<<<<<<<<
 * 
 *     def solveLinearEqn(self, KSP myKSP, Vec rhsVec, Vec solVec):
 */
  __pyx_v_self->_thisptr->createMLRKSPMatrixFree(__pyx_v_jacPCMat->mat, __pyx_v_myKSP->ksp);

  /* "pyDASolvers.pyx":163
 *         self._thisptr.createMLRKSP(jacMat.mat, jacPCMat.mat, myKSP.ksp)
 * 
 *     def createMLRKSPMatrixFree(self, Mat jacPCMat, KSP myKSP):             # <<<<<<<<<<<<<<
 *         self._thisptr.createMLRKSPMatrixFree(jacPCMat.mat, myKSP.ksp)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":166
 *         self._thisptr.createMLRKSPMatrixFree(jacPCMat.mat, myKSP.ksp)
 * 
 *     def solveLinearEqn(self, KSP myKSP, Vec rhsVec, Vec solVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.solveLinearEqn(myKSP.ksp, rhsVec.vec, solVec.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_27solveLinearEqn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_27solveLinearEqn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscKSPObject *__pyx_v_myKSP = 0;
  struct PyPetscVecObject *__pyx_v_rhsVec = 0;
  struct PyPetscVecObject *__pyx_v_solVec = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solveLinearEqn (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_myKSP,&__pyx_n_s_rhsVec,&__pyx_n_s_solVec,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_myKSP)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rhsVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solveLinearEqn", 1, 3, 3, 1); __PYX_ERR(1, 166, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_solVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solveLinearEqn", 1, 3, 3, 2); __PYX_ERR(1, 166, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "solveLinearEqn") < 0)) __PYX_ERR(1, 166, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_myKSP = ((struct PyPetscKSPObject *)values[0]);
    __pyx_v_rhsVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_solVec = ((struct PyPetscVecObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("solveLinearEqn", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 166, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.solveLinearEqn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_myKSP), __pyx_ptype_8petsc4py_5PETSc_KSP, 1, "myKSP", 0))) __PYX_ERR(1, 166, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhsVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "rhsVec", 0))) __PYX_ERR(1, 166, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_solVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "solVec", 0))) __PYX_ERR(1, 166, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_26solveLinearEqn(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_myKSP, __pyx_v_rhsVec, __pyx_v_solVec);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_26solveLinearEqn(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscKSPObject *__pyx_v_myKSP, struct PyPetscVecObject *__pyx_v_rhsVec, struct PyPetscVecObject *__pyx_v_solVec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solveLinearEqn", 0);

  /* "pyDASolvers.pyx":167
 * 
 *     def solveLinearEqn(self, KSP myKSP, Vec rhsVec, Vec solVec):
 *         self._thisptr.solveLinearEqn(myKSP.ksp, rhsVec.vec, solVec.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdRdBC(self, Vec xvVec, Vec wVec, designVarName, Mat dRdBC):
 */
  __pyx_v_self->_thisptr->solveLinearEqn(__pyx_v_myKSP->ksp, __pyx_v_rhsVec->vec, __pyx_v_solVec->vec);

  /* "pyDASolvers.pyx":166
 *         self._thisptr.createMLRKSPMatrixFree(jacPCMat.mat, myKSP.ksp)
 * 
 *     def solveLinearEqn(self, KSP myKSP, Vec rhsVec, Vec solVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.solveLinearEqn(myKSP.ksp, rhsVec.vec, solVec.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":169
 *         self._thisptr.solveLinearEqn(myKSP.ksp, rhsVec.vec, solVec.vec)
 * 
 *     def calcdRdBC(self, Vec xvVec, Vec wVec, designVarName, Mat dRdBC):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdBC(xvVec.vec, wVec.vec, designVarName, dRdBC.mat)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_29calcdRdBC(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_29calcdRdBC(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  PyObject *__pyx_v_designVarName = 0;
  struct PyPetscMatObject *__pyx_v_dRdBC = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdRdBC (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_designVarName,&__pyx_n_s_dRdBC,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdBC", 1, 4, 4, 1); __PYX_ERR(1, 169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdBC", 1, 4, 4, 2); __PYX_ERR(1, 169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dRdBC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdBC", 1, 4, 4, 3); __PYX_ERR(1, 169, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdRdBC") < 0)) __PYX_ERR(1, 169, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_designVarName = values[2];
    __pyx_v_dRdBC = ((struct PyPetscMatObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdRdBC", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 169, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdBC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 169, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 169, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dRdBC), __pyx_ptype_8petsc4py_5PETSc_Mat, 1, "dRdBC", 0))) __PYX_ERR(1, 169, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_28calcdRdBC(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_designVarName, __pyx_v_dRdBC);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_28calcdRdBC(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_designVarName, struct PyPetscMatObject *__pyx_v_dRdBC) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdRdBC", 0);

  /* "pyDASolvers.pyx":170
 * 
 *     def calcdRdBC(self, Vec xvVec, Vec wVec, designVarName, Mat dRdBC):
 *         self._thisptr.calcdRdBC(xvVec.vec, wVec.vec, designVarName, dRdBC.mat)             # <<<<<<<<<<<<<<
 * 
 *     def calcdFdBC(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdBC):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 170, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdRdBC(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_t_1, __pyx_v_dRdBC->mat);

  /* "pyDASolvers.pyx":169
 *         self._thisptr.solveLinearEqn(myKSP.ksp, rhsVec.vec, solVec.vec)
 * 
 *     def calcdRdBC(self, Vec xvVec, Vec wVec, designVarName, Mat dRdBC):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdBC(xvVec.vec, wVec.vec, designVarName, dRdBC.mat)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdBC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":172
 *         self._thisptr.calcdRdBC(xvVec.vec, wVec.vec, designVarName, dRdBC.mat)
 * 
 *     def calcdFdBC(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdBC):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdBC(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdBC.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_31calcdFdBC(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_31calcdFdBC(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  PyObject *__pyx_v_objFuncName = 0;
  PyObject *__pyx_v_designVarName = 0;
  struct PyPetscVecObject *__pyx_v_dFdBC = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdFdBC (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_objFuncName,&__pyx_n_s_designVarName,&__pyx_n_s_dFdBC,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdBC", 1, 5, 5, 1); __PYX_ERR(1, 172, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objFuncName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdBC", 1, 5, 5, 2); __PYX_ERR(1, 172, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdBC", 1, 5, 5, 3); __PYX_ERR(1, 172, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dFdBC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdBC", 1, 5, 5, 4); __PYX_ERR(1, 172, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdFdBC") < 0)) __PYX_ERR(1, 172, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_objFuncName = values[2];
    __pyx_v_designVarName = values[3];
    __pyx_v_dFdBC = ((struct PyPetscVecObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdFdBC", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 172, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdBC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 172, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 172, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dFdBC), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dFdBC", 0))) __PYX_ERR(1, 172, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_30calcdFdBC(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_objFuncName, __pyx_v_designVarName, __pyx_v_dFdBC);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_30calcdFdBC(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dFdBC) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdFdBC", 0);

  /* "pyDASolvers.pyx":173
 * 
 *     def calcdFdBC(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdBC):
 *         self._thisptr.calcdFdBC(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdBC.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdFdBCAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdBC):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_objFuncName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 173, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 173, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdFdBC(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_t_1, __pyx_t_2, __pyx_v_dFdBC->vec);

  /* "pyDASolvers.pyx":172
 *         self._thisptr.calcdRdBC(xvVec.vec, wVec.vec, designVarName, dRdBC.mat)
 * 
 *     def calcdFdBC(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdBC):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdBC(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdBC.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdBC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":175
 *         self._thisptr.calcdFdBC(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdBC.vec)
 * 
 *     def calcdFdBCAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdBC):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdBCAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdBC.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_33calcdFdBCAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_33calcdFdBCAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  PyObject *__pyx_v_objFuncName = 0;
  PyObject *__pyx_v_designVarName = 0;
  struct PyPetscVecObject *__pyx_v_dFdBC = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdFdBCAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_objFuncName,&__pyx_n_s_designVarName,&__pyx_n_s_dFdBC,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdBCAD", 1, 5, 5, 1); __PYX_ERR(1, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objFuncName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdBCAD", 1, 5, 5, 2); __PYX_ERR(1, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdBCAD", 1, 5, 5, 3); __PYX_ERR(1, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dFdBC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdBCAD", 1, 5, 5, 4); __PYX_ERR(1, 175, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdFdBCAD") < 0)) __PYX_ERR(1, 175, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_objFuncName = values[2];
    __pyx_v_designVarName = values[3];
    __pyx_v_dFdBC = ((struct PyPetscVecObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdFdBCAD", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 175, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdBCAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 175, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 175, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dFdBC), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dFdBC", 0))) __PYX_ERR(1, 175, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_32calcdFdBCAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_objFuncName, __pyx_v_designVarName, __pyx_v_dFdBC);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_32calcdFdBCAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dFdBC) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdFdBCAD", 0);

  /* "pyDASolvers.pyx":176
 * 
 *     def calcdFdBCAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdBC):
 *         self._thisptr.calcdFdBCAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdBC.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdRdAOA(self, Vec xvVec, Vec wVec, designVarName, Mat dRdAOA):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_objFuncName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 176, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 176, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdFdBCAD(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_t_1, __pyx_t_2, __pyx_v_dFdBC->vec);

  /* "pyDASolvers.pyx":175
 *         self._thisptr.calcdFdBC(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdBC.vec)
 * 
 *     def calcdFdBCAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdBC):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdBCAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdBC.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdBCAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":178
 *         self._thisptr.calcdFdBCAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdBC.vec)
 * 
 *     def calcdRdAOA(self, Vec xvVec, Vec wVec, designVarName, Mat dRdAOA):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdAOA(xvVec.vec, wVec.vec, designVarName, dRdAOA.mat)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_35calcdRdAOA(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_35calcdRdAOA(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  PyObject *__pyx_v_designVarName = 0;
  struct PyPetscMatObject *__pyx_v_dRdAOA = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdRdAOA (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_designVarName,&__pyx_n_s_dRdAOA,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdAOA", 1, 4, 4, 1); __PYX_ERR(1, 178, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdAOA", 1, 4, 4, 2); __PYX_ERR(1, 178, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dRdAOA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdAOA", 1, 4, 4, 3); __PYX_ERR(1, 178, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdRdAOA") < 0)) __PYX_ERR(1, 178, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_designVarName = values[2];
    __pyx_v_dRdAOA = ((struct PyPetscMatObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdRdAOA", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 178, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdAOA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 178, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 178, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dRdAOA), __pyx_ptype_8petsc4py_5PETSc_Mat, 1, "dRdAOA", 0))) __PYX_ERR(1, 178, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_34calcdRdAOA(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_designVarName, __pyx_v_dRdAOA);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_34calcdRdAOA(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_designVarName, struct PyPetscMatObject *__pyx_v_dRdAOA) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdRdAOA", 0);

  /* "pyDASolvers.pyx":179
 * 
 *     def calcdRdAOA(self, Vec xvVec, Vec wVec, designVarName, Mat dRdAOA):
 *         self._thisptr.calcdRdAOA(xvVec.vec, wVec.vec, designVarName, dRdAOA.mat)             # <<<<<<<<<<<<<<
 * 
 *     def calcdFdAOA(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdAOA):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 179, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdRdAOA(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_t_1, __pyx_v_dRdAOA->mat);

  /* "pyDASolvers.pyx":178
 *         self._thisptr.calcdFdBCAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdBC.vec)
 * 
 *     def calcdRdAOA(self, Vec xvVec, Vec wVec, designVarName, Mat dRdAOA):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdAOA(xvVec.vec, wVec.vec, designVarName, dRdAOA.mat)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdAOA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":181
 *         self._thisptr.calcdRdAOA(xvVec.vec, wVec.vec, designVarName, dRdAOA.mat)
 * 
 *     def calcdFdAOA(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdAOA):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdAOA(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdAOA.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_37calcdFdAOA(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_37calcdFdAOA(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  PyObject *__pyx_v_objFuncName = 0;
  PyObject *__pyx_v_designVarName = 0;
  struct PyPetscVecObject *__pyx_v_dFdAOA = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdFdAOA (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_objFuncName,&__pyx_n_s_designVarName,&__pyx_n_s_dFdAOA,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdAOA", 1, 5, 5, 1); __PYX_ERR(1, 181, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objFuncName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdAOA", 1, 5, 5, 2); __PYX_ERR(1, 181, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdAOA", 1, 5, 5, 3); __PYX_ERR(1, 181, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dFdAOA)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdAOA", 1, 5, 5, 4); __PYX_ERR(1, 181, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdFdAOA") < 0)) __PYX_ERR(1, 181, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_objFuncName = values[2];
    __pyx_v_designVarName = values[3];
    __pyx_v_dFdAOA = ((struct PyPetscVecObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdFdAOA", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 181, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdAOA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 181, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 181, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dFdAOA), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dFdAOA", 0))) __PYX_ERR(1, 181, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_36calcdFdAOA(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_objFuncName, __pyx_v_designVarName, __pyx_v_dFdAOA);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_36calcdFdAOA(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dFdAOA) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdFdAOA", 0);

  /* "pyDASolvers.pyx":182
 * 
 *     def calcdFdAOA(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdAOA):
 *         self._thisptr.calcdFdAOA(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdAOA.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdRdFFD(self, Vec xvVec, Vec wVec, designVarName, Mat dRdFFD):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_objFuncName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 182, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 182, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdFdAOA(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_t_1, __pyx_t_2, __pyx_v_dFdAOA->vec);

  /* "pyDASolvers.pyx":181
 *         self._thisptr.calcdRdAOA(xvVec.vec, wVec.vec, designVarName, dRdAOA.mat)
 * 
 *     def calcdFdAOA(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdAOA):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdAOA(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdAOA.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdAOA", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":184
 *         self._thisptr.calcdFdAOA(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdAOA.vec)
 * 
 *     def calcdRdFFD(self, Vec xvVec, Vec wVec, designVarName, Mat dRdFFD):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdFFD(xvVec.vec, wVec.vec, designVarName, dRdFFD.mat)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_39calcdRdFFD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_39calcdRdFFD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  PyObject *__pyx_v_designVarName = 0;
  struct PyPetscMatObject *__pyx_v_dRdFFD = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdRdFFD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_designVarName,&__pyx_n_s_dRdFFD,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdFFD", 1, 4, 4, 1); __PYX_ERR(1, 184, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdFFD", 1, 4, 4, 2); __PYX_ERR(1, 184, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dRdFFD)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdFFD", 1, 4, 4, 3); __PYX_ERR(1, 184, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdRdFFD") < 0)) __PYX_ERR(1, 184, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_designVarName = values[2];
    __pyx_v_dRdFFD = ((struct PyPetscMatObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdRdFFD", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 184, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdFFD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 184, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 184, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dRdFFD), __pyx_ptype_8petsc4py_5PETSc_Mat, 1, "dRdFFD", 0))) __PYX_ERR(1, 184, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_38calcdRdFFD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_designVarName, __pyx_v_dRdFFD);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_38calcdRdFFD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_designVarName, struct PyPetscMatObject *__pyx_v_dRdFFD) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdRdFFD", 0);

  /* "pyDASolvers.pyx":185
 * 
 *     def calcdRdFFD(self, Vec xvVec, Vec wVec, designVarName, Mat dRdFFD):
 *         self._thisptr.calcdRdFFD(xvVec.vec, wVec.vec, designVarName, dRdFFD.mat)             # <<<<<<<<<<<<<<
 * 
 *     def calcdRdXvTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, Vec dRdXvTPsi):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 185, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdRdFFD(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_t_1, __pyx_v_dRdFFD->mat);

  /* "pyDASolvers.pyx":184
 *         self._thisptr.calcdFdAOA(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdAOA.vec)
 * 
 *     def calcdRdFFD(self, Vec xvVec, Vec wVec, designVarName, Mat dRdFFD):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdFFD(xvVec.vec, wVec.vec, designVarName, dRdFFD.mat)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdFFD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":187
 *         self._thisptr.calcdRdFFD(xvVec.vec, wVec.vec, designVarName, dRdFFD.mat)
 * 
 *     def calcdRdXvTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, Vec dRdXvTPsi):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdXvTPsiAD(xvVec.vec, wVec.vec, psi.vec, dRdXvTPsi.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_41calcdRdXvTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_41calcdRdXvTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  struct PyPetscVecObject *__pyx_v_psi = 0;
  struct PyPetscVecObject *__pyx_v_dRdXvTPsi = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdRdXvTPsiAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_psi,&__pyx_n_s_dRdXvTPsi,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdXvTPsiAD", 1, 4, 4, 1); __PYX_ERR(1, 187, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_psi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdXvTPsiAD", 1, 4, 4, 2); __PYX_ERR(1, 187, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dRdXvTPsi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdXvTPsiAD", 1, 4, 4, 3); __PYX_ERR(1, 187, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdRdXvTPsiAD") < 0)) __PYX_ERR(1, 187, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_psi = ((struct PyPetscVecObject *)values[2]);
    __pyx_v_dRdXvTPsi = ((struct PyPetscVecObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdRdXvTPsiAD", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 187, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdXvTPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 187, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 187, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_psi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "psi", 0))) __PYX_ERR(1, 187, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dRdXvTPsi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dRdXvTPsi", 0))) __PYX_ERR(1, 187, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_40calcdRdXvTPsiAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_psi, __pyx_v_dRdXvTPsi);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_40calcdRdXvTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_psi, struct PyPetscVecObject *__pyx_v_dRdXvTPsi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdRdXvTPsiAD", 0);

  /* "pyDASolvers.pyx":188
 * 
 *     def calcdRdXvTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, Vec dRdXvTPsi):
 *         self._thisptr.calcdRdXvTPsiAD(xvVec.vec, wVec.vec, psi.vec, dRdXvTPsi.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdForcedXvAD(self, Vec xvVec, Vec wVec, Vec fBarVec, Vec dForcedXv):
 */
  __pyx_v_self->_thisptr->calcdRdXvTPsiAD(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_v_psi->vec, __pyx_v_dRdXvTPsi->vec);

  /* "pyDASolvers.pyx":187
 *         self._thisptr.calcdRdFFD(xvVec.vec, wVec.vec, designVarName, dRdFFD.mat)
 * 
 *     def calcdRdXvTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, Vec dRdXvTPsi):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdXvTPsiAD(xvVec.vec, wVec.vec, psi.vec, dRdXvTPsi.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":190
 *         self._thisptr.calcdRdXvTPsiAD(xvVec.vec, wVec.vec, psi.vec, dRdXvTPsi.vec)
 * 
 *     def calcdForcedXvAD(self, Vec xvVec, Vec wVec, Vec fBarVec, Vec dForcedXv):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdForcedXvAD(xvVec.vec, wVec.vec, fBarVec.vec, dForcedXv.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_43calcdForcedXvAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_43calcdForcedXvAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  struct PyPetscVecObject *__pyx_v_fBarVec = 0;
  struct PyPetscVecObject *__pyx_v_dForcedXv = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdForcedXvAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_fBarVec,&__pyx_n_s_dForcedXv,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdForcedXvAD", 1, 4, 4, 1); __PYX_ERR(1, 190, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fBarVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdForcedXvAD", 1, 4, 4, 2); __PYX_ERR(1, 190, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dForcedXv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdForcedXvAD", 1, 4, 4, 3); __PYX_ERR(1, 190, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdForcedXvAD") < 0)) __PYX_ERR(1, 190, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_fBarVec = ((struct PyPetscVecObject *)values[2]);
    __pyx_v_dForcedXv = ((struct PyPetscVecObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdForcedXvAD", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 190, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdForcedXvAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 190, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 190, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fBarVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "fBarVec", 0))) __PYX_ERR(1, 190, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dForcedXv), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dForcedXv", 0))) __PYX_ERR(1, 190, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_42calcdForcedXvAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_fBarVec, __pyx_v_dForcedXv);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_42calcdForcedXvAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_fBarVec, struct PyPetscVecObject *__pyx_v_dForcedXv) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdForcedXvAD", 0);

  /* "pyDASolvers.pyx":191
 * 
 *     def calcdForcedXvAD(self, Vec xvVec, Vec wVec, Vec fBarVec, Vec dForcedXv):
 *         self._thisptr.calcdForcedXvAD(xvVec.vec, wVec.vec, fBarVec.vec, dForcedXv.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdRdActTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, designVarName, Vec dRdActTPsi):
 */
  __pyx_v_self->_thisptr->calcdForcedXvAD(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_v_fBarVec->vec, __pyx_v_dForcedXv->vec);

  /* "pyDASolvers.pyx":190
 *         self._thisptr.calcdRdXvTPsiAD(xvVec.vec, wVec.vec, psi.vec, dRdXvTPsi.vec)
 * 
 *     def calcdForcedXvAD(self, Vec xvVec, Vec wVec, Vec fBarVec, Vec dForcedXv):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdForcedXvAD(xvVec.vec, wVec.vec, fBarVec.vec, dForcedXv.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":193
 *         self._thisptr.calcdForcedXvAD(xvVec.vec, wVec.vec, fBarVec.vec, dForcedXv.vec)
 * 
 *     def calcdRdActTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, designVarName, Vec dRdActTPsi):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdActTPsiAD(xvVec.vec, wVec.vec, psi.vec, designVarName, dRdActTPsi.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_45calcdRdActTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_45calcdRdActTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  struct PyPetscVecObject *__pyx_v_psi = 0;
  PyObject *__pyx_v_designVarName = 0;
  struct PyPetscVecObject *__pyx_v_dRdActTPsi = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdRdActTPsiAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_psi,&__pyx_n_s_designVarName,&__pyx_n_s_dRdActTPsi,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdActTPsiAD", 1, 5, 5, 1); __PYX_ERR(1, 193, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_psi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdActTPsiAD", 1, 5, 5, 2); __PYX_ERR(1, 193, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdActTPsiAD", 1, 5, 5, 3); __PYX_ERR(1, 193, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dRdActTPsi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdActTPsiAD", 1, 5, 5, 4); __PYX_ERR(1, 193, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdRdActTPsiAD") < 0)) __PYX_ERR(1, 193, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_psi = ((struct PyPetscVecObject *)values[2]);
    __pyx_v_designVarName = values[3];
    __pyx_v_dRdActTPsi = ((struct PyPetscVecObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdRdActTPsiAD", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 193, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdActTPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 193, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 193, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_psi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "psi", 0))) __PYX_ERR(1, 193, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dRdActTPsi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dRdActTPsi", 0))) __PYX_ERR(1, 193, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_44calcdRdActTPsiAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_psi, __pyx_v_designVarName, __pyx_v_dRdActTPsi);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_44calcdRdActTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_psi, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dRdActTPsi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdRdActTPsiAD", 0);

  /* "pyDASolvers.pyx":194
 * 
 *     def calcdRdActTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, designVarName, Vec dRdActTPsi):
 *         self._thisptr.calcdRdActTPsiAD(xvVec.vec, wVec.vec, psi.vec, designVarName, dRdActTPsi.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdForcedWAD(self, Vec xvVec, Vec wVec, Vec fBarVec, Vec dForcedW):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 194, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdRdActTPsiAD(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_v_psi->vec, __pyx_t_1, __pyx_v_dRdActTPsi->vec);

  /* "pyDASolvers.pyx":193
 *         self._thisptr.calcdForcedXvAD(xvVec.vec, wVec.vec, fBarVec.vec, dForcedXv.vec)
 * 
 *     def calcdRdActTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, designVarName, Vec dRdActTPsi):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdActTPsiAD(xvVec.vec, wVec.vec, psi.vec, designVarName, dRdActTPsi.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdActTPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":196
 *         self._thisptr.calcdRdActTPsiAD(xvVec.vec, wVec.vec, psi.vec, designVarName, dRdActTPsi.vec)
 * 
 *     def calcdForcedWAD(self, Vec xvVec, Vec wVec, Vec fBarVec, Vec dForcedW):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdForcedWAD(xvVec.vec, wVec.vec, fBarVec.vec, dForcedW.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_47calcdForcedWAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_47calcdForcedWAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  struct PyPetscVecObject *__pyx_v_fBarVec = 0;
  struct PyPetscVecObject *__pyx_v_dForcedW = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdForcedWAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_fBarVec,&__pyx_n_s_dForcedW,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdForcedWAD", 1, 4, 4, 1); __PYX_ERR(1, 196, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fBarVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdForcedWAD", 1, 4, 4, 2); __PYX_ERR(1, 196, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dForcedW)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdForcedWAD", 1, 4, 4, 3); __PYX_ERR(1, 196, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdForcedWAD") < 0)) __PYX_ERR(1, 196, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_fBarVec = ((struct PyPetscVecObject *)values[2]);
    __pyx_v_dForcedW = ((struct PyPetscVecObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdForcedWAD", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 196, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdForcedWAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 196, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 196, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fBarVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "fBarVec", 0))) __PYX_ERR(1, 196, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dForcedW), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dForcedW", 0))) __PYX_ERR(1, 196, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_46calcdForcedWAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_fBarVec, __pyx_v_dForcedW);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_46calcdForcedWAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_fBarVec, struct PyPetscVecObject *__pyx_v_dForcedW) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdForcedWAD", 0);

  /* "pyDASolvers.pyx":197
 * 
 *     def calcdForcedWAD(self, Vec xvVec, Vec wVec, Vec fBarVec, Vec dForcedW):
 *         self._thisptr.calcdForcedWAD(xvVec.vec, wVec.vec, fBarVec.vec, dForcedW.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdFdACTAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdACT):
 */
  __pyx_v_self->_thisptr->calcdForcedWAD(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_v_fBarVec->vec, __pyx_v_dForcedW->vec);

  /* "pyDASolvers.pyx":196
 *         self._thisptr.calcdRdActTPsiAD(xvVec.vec, wVec.vec, psi.vec, designVarName, dRdActTPsi.vec)
 * 
 *     def calcdForcedWAD(self, Vec xvVec, Vec wVec, Vec fBarVec, Vec dForcedW):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdForcedWAD(xvVec.vec, wVec.vec, fBarVec.vec, dForcedW.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":199
 *         self._thisptr.calcdForcedWAD(xvVec.vec, wVec.vec, fBarVec.vec, dForcedW.vec)
 * 
 *     def calcdFdACTAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdACT):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdACTAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdACT.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_49calcdFdACTAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_49calcdFdACTAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  PyObject *__pyx_v_objFuncName = 0;
  PyObject *__pyx_v_designVarName = 0;
  struct PyPetscVecObject *__pyx_v_dFdACT = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdFdACTAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_objFuncName,&__pyx_n_s_designVarName,&__pyx_n_s_dFdACT,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdACTAD", 1, 5, 5, 1); __PYX_ERR(1, 199, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objFuncName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdACTAD", 1, 5, 5, 2); __PYX_ERR(1, 199, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdACTAD", 1, 5, 5, 3); __PYX_ERR(1, 199, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dFdACT)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdACTAD", 1, 5, 5, 4); __PYX_ERR(1, 199, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdFdACTAD") < 0)) __PYX_ERR(1, 199, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_objFuncName = values[2];
    __pyx_v_designVarName = values[3];
    __pyx_v_dFdACT = ((struct PyPetscVecObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdFdACTAD", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 199, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdACTAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 199, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 199, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dFdACT), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dFdACT", 0))) __PYX_ERR(1, 199, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_48calcdFdACTAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_objFuncName, __pyx_v_designVarName, __pyx_v_dFdACT);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_48calcdFdACTAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dFdACT) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdFdACTAD", 0);

  /* "pyDASolvers.pyx":200
 * 
 *     def calcdFdACTAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdACT):
 *         self._thisptr.calcdFdACTAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdACT.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdFdACT(self, Vec xvVec, Vec wVec, objFuncName, designVarName, designVarType, Vec dFdACT):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_objFuncName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 200, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 200, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdFdACTAD(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_t_1, __pyx_t_2, __pyx_v_dFdACT->vec);

  /* "pyDASolvers.pyx":199
 *         self._thisptr.calcdForcedWAD(xvVec.vec, wVec.vec, fBarVec.vec, dForcedW.vec)
 * 
 *     def calcdFdACTAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdACT):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdACTAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdACT.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdACTAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":202
 *         self._thisptr.calcdFdACTAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdACT.vec)
 * 
 *     def calcdFdACT(self, Vec xvVec, Vec wVec, objFuncName, designVarName, designVarType, Vec dFdACT):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdACT(xvVec.vec, wVec.vec, objFuncName, designVarName, designVarType, dFdACT.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_51calcdFdACT(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_51calcdFdACT(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  PyObject *__pyx_v_objFuncName = 0;
  PyObject *__pyx_v_designVarName = 0;
  PyObject *__pyx_v_designVarType = 0;
  struct PyPetscVecObject *__pyx_v_dFdACT = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdFdACT (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_objFuncName,&__pyx_n_s_designVarName,&__pyx_n_s_designVarType,&__pyx_n_s_dFdACT,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdACT", 1, 6, 6, 1); __PYX_ERR(1, 202, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objFuncName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdACT", 1, 6, 6, 2); __PYX_ERR(1, 202, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdACT", 1, 6, 6, 3); __PYX_ERR(1, 202, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarType)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdACT", 1, 6, 6, 4); __PYX_ERR(1, 202, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dFdACT)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdACT", 1, 6, 6, 5); __PYX_ERR(1, 202, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdFdACT") < 0)) __PYX_ERR(1, 202, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_objFuncName = values[2];
    __pyx_v_designVarName = values[3];
    __pyx_v_designVarType = values[4];
    __pyx_v_dFdACT = ((struct PyPetscVecObject *)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdFdACT", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 202, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdACT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 202, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 202, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dFdACT), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dFdACT", 0))) __PYX_ERR(1, 202, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_50calcdFdACT(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_objFuncName, __pyx_v_designVarName, __pyx_v_designVarType, __pyx_v_dFdACT);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_50calcdFdACT(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, PyObject *__pyx_v_designVarType, struct PyPetscVecObject *__pyx_v_dFdACT) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  char *__pyx_t_2;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdFdACT", 0);

  /* "pyDASolvers.pyx":203
 * 
 *     def calcdFdACT(self, Vec xvVec, Vec wVec, objFuncName, designVarName, designVarType, Vec dFdACT):
 *         self._thisptr.calcdFdACT(xvVec.vec, wVec.vec, objFuncName, designVarName, designVarType, dFdACT.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdRdAOATPsiAD(self, Vec xvVec, Vec wVec, Vec psi, designVarName, Vec dRdAOATPsi):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_objFuncName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 203, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 203, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarType); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(1, 203, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdFdACT(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_v_dFdACT->vec);

  /* "pyDASolvers.pyx":202
 *         self._thisptr.calcdFdACTAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdACT.vec)
 * 
 *     def calcdFdACT(self, Vec xvVec, Vec wVec, objFuncName, designVarName, designVarType, Vec dFdACT):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdACT(xvVec.vec, wVec.vec, objFuncName, designVarName, designVarType, dFdACT.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdACT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":205
 *         self._thisptr.calcdFdACT(xvVec.vec, wVec.vec, objFuncName, designVarName, designVarType, dFdACT.vec)
 * 
 *     def calcdRdAOATPsiAD(self, Vec xvVec, Vec wVec, Vec psi, designVarName, Vec dRdAOATPsi):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdAOATPsiAD(xvVec.vec, wVec.vec, psi.vec, designVarName, dRdAOATPsi.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_53calcdRdAOATPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_53calcdRdAOATPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  struct PyPetscVecObject *__pyx_v_psi = 0;
  PyObject *__pyx_v_designVarName = 0;
  struct PyPetscVecObject *__pyx_v_dRdAOATPsi = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdRdAOATPsiAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_psi,&__pyx_n_s_designVarName,&__pyx_n_s_dRdAOATPsi,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdAOATPsiAD", 1, 5, 5, 1); __PYX_ERR(1, 205, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_psi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdAOATPsiAD", 1, 5, 5, 2); __PYX_ERR(1, 205, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdAOATPsiAD", 1, 5, 5, 3); __PYX_ERR(1, 205, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dRdAOATPsi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdAOATPsiAD", 1, 5, 5, 4); __PYX_ERR(1, 205, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdRdAOATPsiAD") < 0)) __PYX_ERR(1, 205, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_psi = ((struct PyPetscVecObject *)values[2]);
    __pyx_v_designVarName = values[3];
    __pyx_v_dRdAOATPsi = ((struct PyPetscVecObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdRdAOATPsiAD", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 205, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdAOATPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 205, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 205, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_psi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "psi", 0))) __PYX_ERR(1, 205, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dRdAOATPsi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dRdAOATPsi", 0))) __PYX_ERR(1, 205, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_52calcdRdAOATPsiAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_psi, __pyx_v_designVarName, __pyx_v_dRdAOATPsi);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_52calcdRdAOATPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_psi, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dRdAOATPsi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdRdAOATPsiAD", 0);

  /* "pyDASolvers.pyx":206
 * 
 *     def calcdRdAOATPsiAD(self, Vec xvVec, Vec wVec, Vec psi, designVarName, Vec dRdAOATPsi):
 *         self._thisptr.calcdRdAOATPsiAD(xvVec.vec, wVec.vec, psi.vec, designVarName, dRdAOATPsi.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdRdBCTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, designVarName, Vec dRdBCTPsi):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 206, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdRdAOATPsiAD(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_v_psi->vec, __pyx_t_1, __pyx_v_dRdAOATPsi->vec);

  /* "pyDASolvers.pyx":205
 *         self._thisptr.calcdFdACT(xvVec.vec, wVec.vec, objFuncName, designVarName, designVarType, dFdACT.vec)
 * 
 *     def calcdRdAOATPsiAD(self, Vec xvVec, Vec wVec, Vec psi, designVarName, Vec dRdAOATPsi):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdAOATPsiAD(xvVec.vec, wVec.vec, psi.vec, designVarName, dRdAOATPsi.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdAOATPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":208
 *         self._thisptr.calcdRdAOATPsiAD(xvVec.vec, wVec.vec, psi.vec, designVarName, dRdAOATPsi.vec)
 * 
 *     def calcdRdBCTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, designVarName, Vec dRdBCTPsi):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdBCTPsiAD(xvVec.vec, wVec.vec, psi.vec, designVarName, dRdBCTPsi.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_55calcdRdBCTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_55calcdRdBCTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  struct PyPetscVecObject *__pyx_v_psi = 0;
  PyObject *__pyx_v_designVarName = 0;
  struct PyPetscVecObject *__pyx_v_dRdBCTPsi = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdRdBCTPsiAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_psi,&__pyx_n_s_designVarName,&__pyx_n_s_dRdBCTPsi,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdBCTPsiAD", 1, 5, 5, 1); __PYX_ERR(1, 208, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_psi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdBCTPsiAD", 1, 5, 5, 2); __PYX_ERR(1, 208, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdBCTPsiAD", 1, 5, 5, 3); __PYX_ERR(1, 208, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dRdBCTPsi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdBCTPsiAD", 1, 5, 5, 4); __PYX_ERR(1, 208, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdRdBCTPsiAD") < 0)) __PYX_ERR(1, 208, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_psi = ((struct PyPetscVecObject *)values[2]);
    __pyx_v_designVarName = values[3];
    __pyx_v_dRdBCTPsi = ((struct PyPetscVecObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdRdBCTPsiAD", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 208, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdBCTPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 208, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 208, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_psi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "psi", 0))) __PYX_ERR(1, 208, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dRdBCTPsi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dRdBCTPsi", 0))) __PYX_ERR(1, 208, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_54calcdRdBCTPsiAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_psi, __pyx_v_designVarName, __pyx_v_dRdBCTPsi);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_54calcdRdBCTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_psi, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dRdBCTPsi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdRdBCTPsiAD", 0);

  /* "pyDASolvers.pyx":209
 * 
 *     def calcdRdBCTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, designVarName, Vec dRdBCTPsi):
 *         self._thisptr.calcdRdBCTPsiAD(xvVec.vec, wVec.vec, psi.vec, designVarName, dRdBCTPsi.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdFdFFD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdFFD):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 209, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdRdBCTPsiAD(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_v_psi->vec, __pyx_t_1, __pyx_v_dRdBCTPsi->vec);

  /* "pyDASolvers.pyx":208
 *         self._thisptr.calcdRdAOATPsiAD(xvVec.vec, wVec.vec, psi.vec, designVarName, dRdAOATPsi.vec)
 * 
 *     def calcdRdBCTPsiAD(self, Vec xvVec, Vec wVec, Vec psi, designVarName, Vec dRdBCTPsi):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdBCTPsiAD(xvVec.vec, wVec.vec, psi.vec, designVarName, dRdBCTPsi.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdBCTPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":211
 *         self._thisptr.calcdRdBCTPsiAD(xvVec.vec, wVec.vec, psi.vec, designVarName, dRdBCTPsi.vec)
 * 
 *     def calcdFdFFD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdFFD):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdFFD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdFFD.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_57calcdFdFFD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_57calcdFdFFD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  PyObject *__pyx_v_objFuncName = 0;
  PyObject *__pyx_v_designVarName = 0;
  struct PyPetscVecObject *__pyx_v_dFdFFD = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdFdFFD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_objFuncName,&__pyx_n_s_designVarName,&__pyx_n_s_dFdFFD,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdFFD", 1, 5, 5, 1); __PYX_ERR(1, 211, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objFuncName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdFFD", 1, 5, 5, 2); __PYX_ERR(1, 211, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdFFD", 1, 5, 5, 3); __PYX_ERR(1, 211, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dFdFFD)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdFFD", 1, 5, 5, 4); __PYX_ERR(1, 211, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdFdFFD") < 0)) __PYX_ERR(1, 211, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_objFuncName = values[2];
    __pyx_v_designVarName = values[3];
    __pyx_v_dFdFFD = ((struct PyPetscVecObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdFdFFD", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 211, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdFFD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 211, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 211, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dFdFFD), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dFdFFD", 0))) __PYX_ERR(1, 211, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_56calcdFdFFD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_objFuncName, __pyx_v_designVarName, __pyx_v_dFdFFD);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_56calcdFdFFD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dFdFFD) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdFdFFD", 0);

  /* "pyDASolvers.pyx":212
 * 
 *     def calcdFdFFD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdFFD):
 *         self._thisptr.calcdFdFFD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdFFD.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdFdXvAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdXv):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_objFuncName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 212, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 212, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdFdFFD(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_t_1, __pyx_t_2, __pyx_v_dFdFFD->vec);

  /* "pyDASolvers.pyx":211
 *         self._thisptr.calcdRdBCTPsiAD(xvVec.vec, wVec.vec, psi.vec, designVarName, dRdBCTPsi.vec)
 * 
 *     def calcdFdFFD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdFFD):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdFFD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdFFD.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdFFD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":214
 *         self._thisptr.calcdFdFFD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdFFD.vec)
 * 
 *     def calcdFdXvAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdXv):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdXvAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdXv.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_59calcdFdXvAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_59calcdFdXvAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  PyObject *__pyx_v_objFuncName = 0;
  PyObject *__pyx_v_designVarName = 0;
  struct PyPetscVecObject *__pyx_v_dFdXv = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdFdXvAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_objFuncName,&__pyx_n_s_designVarName,&__pyx_n_s_dFdXv,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdXvAD", 1, 5, 5, 1); __PYX_ERR(1, 214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objFuncName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdXvAD", 1, 5, 5, 2); __PYX_ERR(1, 214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdXvAD", 1, 5, 5, 3); __PYX_ERR(1, 214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dFdXv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdXvAD", 1, 5, 5, 4); __PYX_ERR(1, 214, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdFdXvAD") < 0)) __PYX_ERR(1, 214, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_objFuncName = values[2];
    __pyx_v_designVarName = values[3];
    __pyx_v_dFdXv = ((struct PyPetscVecObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdFdXvAD", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 214, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdXvAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 214, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 214, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dFdXv), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dFdXv", 0))) __PYX_ERR(1, 214, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_58calcdFdXvAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_objFuncName, __pyx_v_designVarName, __pyx_v_dFdXv);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_58calcdFdXvAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dFdXv) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdFdXvAD", 0);

  /* "pyDASolvers.pyx":215
 * 
 *     def calcdFdXvAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdXv):
 *         self._thisptr.calcdFdXvAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdXv.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdRdACT(self, Vec xvVec, Vec wVec, designVarName, designVarType, Mat dRdACT):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_objFuncName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 215, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 215, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdFdXvAD(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_t_1, __pyx_t_2, __pyx_v_dFdXv->vec);

  /* "pyDASolvers.pyx":214
 *         self._thisptr.calcdFdFFD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdFFD.vec)
 * 
 *     def calcdFdXvAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdXv):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdXvAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdXv.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdXvAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":217
 *         self._thisptr.calcdFdXvAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdXv.vec)
 * 
 *     def calcdRdACT(self, Vec xvVec, Vec wVec, designVarName, designVarType, Mat dRdACT):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdACT(xvVec.vec, wVec.vec, designVarName, designVarType, dRdACT.mat)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_61calcdRdACT(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_61calcdRdACT(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  PyObject *__pyx_v_designVarName = 0;
  PyObject *__pyx_v_designVarType = 0;
  struct PyPetscMatObject *__pyx_v_dRdACT = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdRdACT (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_designVarName,&__pyx_n_s_designVarType,&__pyx_n_s_dRdACT,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdACT", 1, 5, 5, 1); __PYX_ERR(1, 217, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdACT", 1, 5, 5, 2); __PYX_ERR(1, 217, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarType)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdACT", 1, 5, 5, 3); __PYX_ERR(1, 217, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dRdACT)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdACT", 1, 5, 5, 4); __PYX_ERR(1, 217, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdRdACT") < 0)) __PYX_ERR(1, 217, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_designVarName = values[2];
    __pyx_v_designVarType = values[3];
    __pyx_v_dRdACT = ((struct PyPetscMatObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdRdACT", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 217, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdACT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 217, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 217, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dRdACT), __pyx_ptype_8petsc4py_5PETSc_Mat, 1, "dRdACT", 0))) __PYX_ERR(1, 217, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_60calcdRdACT(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_designVarName, __pyx_v_designVarType, __pyx_v_dRdACT);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_60calcdRdACT(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_designVarName, PyObject *__pyx_v_designVarType, struct PyPetscMatObject *__pyx_v_dRdACT) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdRdACT", 0);

  /* "pyDASolvers.pyx":218
 * 
 *     def calcdRdACT(self, Vec xvVec, Vec wVec, designVarName, designVarType, Mat dRdACT):
 *         self._thisptr.calcdRdACT(xvVec.vec, wVec.vec, designVarName, designVarType, dRdACT.mat)             # <<<<<<<<<<<<<<
 * 
 *     def calcdRdFieldTPsiAD(self, Vec xvVec, Vec wVec, Vec psiVec, designVarName, Vec dRdFieldTPsi):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 218, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarType); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 218, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdRdACT(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_t_1, __pyx_t_2, __pyx_v_dRdACT->mat);

  /* "pyDASolvers.pyx":217
 *         self._thisptr.calcdFdXvAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdXv.vec)
 * 
 *     def calcdRdACT(self, Vec xvVec, Vec wVec, designVarName, designVarType, Mat dRdACT):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdACT(xvVec.vec, wVec.vec, designVarName, designVarType, dRdACT.mat)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdACT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":220
 *         self._thisptr.calcdRdACT(xvVec.vec, wVec.vec, designVarName, designVarType, dRdACT.mat)
 * 
 *     def calcdRdFieldTPsiAD(self, Vec xvVec, Vec wVec, Vec psiVec, designVarName, Vec dRdFieldTPsi):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdFieldTPsiAD(xvVec.vec, wVec.vec, psiVec.vec, designVarName, dRdFieldTPsi.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_63calcdRdFieldTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_63calcdRdFieldTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  struct PyPetscVecObject *__pyx_v_psiVec = 0;
  PyObject *__pyx_v_designVarName = 0;
  struct PyPetscVecObject *__pyx_v_dRdFieldTPsi = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdRdFieldTPsiAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_psiVec,&__pyx_n_s_designVarName,&__pyx_n_s_dRdFieldTPsi,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdFieldTPsiAD", 1, 5, 5, 1); __PYX_ERR(1, 220, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_psiVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdFieldTPsiAD", 1, 5, 5, 2); __PYX_ERR(1, 220, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdFieldTPsiAD", 1, 5, 5, 3); __PYX_ERR(1, 220, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dRdFieldTPsi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdFieldTPsiAD", 1, 5, 5, 4); __PYX_ERR(1, 220, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdRdFieldTPsiAD") < 0)) __PYX_ERR(1, 220, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_psiVec = ((struct PyPetscVecObject *)values[2]);
    __pyx_v_designVarName = values[3];
    __pyx_v_dRdFieldTPsi = ((struct PyPetscVecObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdRdFieldTPsiAD", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 220, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdFieldTPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 220, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 220, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_psiVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "psiVec", 0))) __PYX_ERR(1, 220, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dRdFieldTPsi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dRdFieldTPsi", 0))) __PYX_ERR(1, 220, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_62calcdRdFieldTPsiAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_psiVec, __pyx_v_designVarName, __pyx_v_dRdFieldTPsi);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_62calcdRdFieldTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, struct PyPetscVecObject *__pyx_v_psiVec, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dRdFieldTPsi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdRdFieldTPsiAD", 0);

  /* "pyDASolvers.pyx":221
 * 
 *     def calcdRdFieldTPsiAD(self, Vec xvVec, Vec wVec, Vec psiVec, designVarName, Vec dRdFieldTPsi):
 *         self._thisptr.calcdRdFieldTPsiAD(xvVec.vec, wVec.vec, psiVec.vec, designVarName, dRdFieldTPsi.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdFdFieldAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdField):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 221, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdRdFieldTPsiAD(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_v_psiVec->vec, __pyx_t_1, __pyx_v_dRdFieldTPsi->vec);

  /* "pyDASolvers.pyx":220
 *         self._thisptr.calcdRdACT(xvVec.vec, wVec.vec, designVarName, designVarType, dRdACT.mat)
 * 
 *     def calcdRdFieldTPsiAD(self, Vec xvVec, Vec wVec, Vec psiVec, designVarName, Vec dRdFieldTPsi):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdFieldTPsiAD(xvVec.vec, wVec.vec, psiVec.vec, designVarName, dRdFieldTPsi.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdFieldTPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":223
 *         self._thisptr.calcdRdFieldTPsiAD(xvVec.vec, wVec.vec, psiVec.vec, designVarName, dRdFieldTPsi.vec)
 * 
 *     def calcdFdFieldAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdField):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdFieldAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdField.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_65calcdFdFieldAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_65calcdFdFieldAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xvVec = 0;
  struct PyPetscVecObject *__pyx_v_wVec = 0;
  PyObject *__pyx_v_objFuncName = 0;
  PyObject *__pyx_v_designVarName = 0;
  struct PyPetscVecObject *__pyx_v_dFdField = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdFdFieldAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xvVec,&__pyx_n_s_wVec,&__pyx_n_s_objFuncName,&__pyx_n_s_designVarName,&__pyx_n_s_dFdField,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xvVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdFieldAD", 1, 5, 5, 1); __PYX_ERR(1, 223, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objFuncName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdFieldAD", 1, 5, 5, 2); __PYX_ERR(1, 223, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_designVarName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdFieldAD", 1, 5, 5, 3); __PYX_ERR(1, 223, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dFdField)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFdFieldAD", 1, 5, 5, 4); __PYX_ERR(1, 223, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdFdFieldAD") < 0)) __PYX_ERR(1, 223, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_xvVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_wVec = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_objFuncName = values[2];
    __pyx_v_designVarName = values[3];
    __pyx_v_dFdField = ((struct PyPetscVecObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdFdFieldAD", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 223, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdFieldAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 223, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 223, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dFdField), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dFdField", 0))) __PYX_ERR(1, 223, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_64calcdFdFieldAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xvVec, __pyx_v_wVec, __pyx_v_objFuncName, __pyx_v_designVarName, __pyx_v_dFdField);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_64calcdFdFieldAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec, struct PyPetscVecObject *__pyx_v_wVec, PyObject *__pyx_v_objFuncName, PyObject *__pyx_v_designVarName, struct PyPetscVecObject *__pyx_v_dFdField) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdFdFieldAD", 0);

  /* "pyDASolvers.pyx":224
 * 
 *     def calcdFdFieldAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdField):
 *         self._thisptr.calcdFdFieldAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdField.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdRdWOldTPsiAD(self, oldTimeLevel, Vec psi, Vec dRdWOldTPsi):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_objFuncName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 224, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_designVarName); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 224, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdFdFieldAD(__pyx_v_xvVec->vec, __pyx_v_wVec->vec, __pyx_t_1, __pyx_t_2, __pyx_v_dFdField->vec);

  /* "pyDASolvers.pyx":223
 *         self._thisptr.calcdRdFieldTPsiAD(xvVec.vec, wVec.vec, psiVec.vec, designVarName, dRdFieldTPsi.vec)
 * 
 *     def calcdFdFieldAD(self, Vec xvVec, Vec wVec, objFuncName, designVarName, Vec dFdField):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFdFieldAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdField.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFdFieldAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":226
 *         self._thisptr.calcdFdFieldAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdField.vec)
 * 
 *     def calcdRdWOldTPsiAD(self, oldTimeLevel, Vec psi, Vec dRdWOldTPsi):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdWOldTPsiAD(oldTimeLevel, psi.vec, dRdWOldTPsi.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_67calcdRdWOldTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_67calcdRdWOldTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_oldTimeLevel = 0;
  struct PyPetscVecObject *__pyx_v_psi = 0;
  struct PyPetscVecObject *__pyx_v_dRdWOldTPsi = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdRdWOldTPsiAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_oldTimeLevel,&__pyx_n_s_psi,&__pyx_n_s_dRdWOldTPsi,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_oldTimeLevel)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_psi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdWOldTPsiAD", 1, 3, 3, 1); __PYX_ERR(1, 226, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dRdWOldTPsi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdRdWOldTPsiAD", 1, 3, 3, 2); __PYX_ERR(1, 226, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdRdWOldTPsiAD") < 0)) __PYX_ERR(1, 226, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_oldTimeLevel = values[0];
    __pyx_v_psi = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_dRdWOldTPsi = ((struct PyPetscVecObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdRdWOldTPsiAD", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 226, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdWOldTPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_psi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "psi", 0))) __PYX_ERR(1, 226, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dRdWOldTPsi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dRdWOldTPsi", 0))) __PYX_ERR(1, 226, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_66calcdRdWOldTPsiAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_oldTimeLevel, __pyx_v_psi, __pyx_v_dRdWOldTPsi);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_66calcdRdWOldTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_oldTimeLevel, struct PyPetscVecObject *__pyx_v_psi, struct PyPetscVecObject *__pyx_v_dRdWOldTPsi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdRdWOldTPsiAD", 0);

  /* "pyDASolvers.pyx":227
 * 
 *     def calcdRdWOldTPsiAD(self, oldTimeLevel, Vec psi, Vec dRdWOldTPsi):
 *         self._thisptr.calcdRdWOldTPsiAD(oldTimeLevel, psi.vec, dRdWOldTPsi.vec)             # <<<<<<<<<<<<<<
 * 
 *     def convertMPIVec2SeqVec(self, Vec mpiVec, Vec seqVec):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_oldTimeLevel); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 227, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdRdWOldTPsiAD(__pyx_t_1, __pyx_v_psi->vec, __pyx_v_dRdWOldTPsi->vec);

  /* "pyDASolvers.pyx":226
 *         self._thisptr.calcdFdFieldAD(xvVec.vec, wVec.vec, objFuncName, designVarName, dFdField.vec)
 * 
 *     def calcdRdWOldTPsiAD(self, oldTimeLevel, Vec psi, Vec dRdWOldTPsi):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdRdWOldTPsiAD(oldTimeLevel, psi.vec, dRdWOldTPsi.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdRdWOldTPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":229
 *         self._thisptr.calcdRdWOldTPsiAD(oldTimeLevel, psi.vec, dRdWOldTPsi.vec)
 * 
 *     def convertMPIVec2SeqVec(self, Vec mpiVec, Vec seqVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.convertMPIVec2SeqVec(mpiVec.vec, seqVec.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_69convertMPIVec2SeqVec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_69convertMPIVec2SeqVec(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_mpiVec = 0;
  struct PyPetscVecObject *__pyx_v_seqVec = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("convertMPIVec2SeqVec (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mpiVec,&__pyx_n_s_seqVec,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mpiVec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_seqVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("convertMPIVec2SeqVec", 1, 2, 2, 1); __PYX_ERR(1, 229, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "convertMPIVec2SeqVec") < 0)) __PYX_ERR(1, 229, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_mpiVec = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_seqVec = ((struct PyPetscVecObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("convertMPIVec2SeqVec", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 229, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.convertMPIVec2SeqVec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mpiVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "mpiVec", 0))) __PYX_ERR(1, 229, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_seqVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "seqVec", 0))) __PYX_ERR(1, 229, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_68convertMPIVec2SeqVec(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_mpiVec, __pyx_v_seqVec);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_68convertMPIVec2SeqVec(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_mpiVec, struct PyPetscVecObject *__pyx_v_seqVec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("convertMPIVec2SeqVec", 0);

  /* "pyDASolvers.pyx":230
 * 
 *     def convertMPIVec2SeqVec(self, Vec mpiVec, Vec seqVec):
 *         self._thisptr.convertMPIVec2SeqVec(mpiVec.vec, seqVec.vec)             # <<<<<<<<<<<<<<
 * 
 *     def syncDAOptionToActuatorDVs(self):
 */
  __pyx_v_self->_thisptr->convertMPIVec2SeqVec(__pyx_v_mpiVec->vec, __pyx_v_seqVec->vec);

  /* "pyDASolvers.pyx":229
 *         self._thisptr.calcdRdWOldTPsiAD(oldTimeLevel, psi.vec, dRdWOldTPsi.vec)
 * 
 *     def convertMPIVec2SeqVec(self, Vec mpiVec, Vec seqVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.convertMPIVec2SeqVec(mpiVec.vec, seqVec.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":232
 *         self._thisptr.convertMPIVec2SeqVec(mpiVec.vec, seqVec.vec)
 * 
 *     def syncDAOptionToActuatorDVs(self):             # <<<<<<<<<<<<<<
 *         self._thisptr.syncDAOptionToActuatorDVs()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_71syncDAOptionToActuatorDVs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_71syncDAOptionToActuatorDVs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("syncDAOptionToActuatorDVs (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_70syncDAOptionToActuatorDVs(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_70syncDAOptionToActuatorDVs(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("syncDAOptionToActuatorDVs", 0);

  /* "pyDASolvers.pyx":233
 * 
 *     def syncDAOptionToActuatorDVs(self):
 *         self._thisptr.syncDAOptionToActuatorDVs()             # <<<<<<<<<<<<<<
 * 
 *     def updateOFField(self, Vec wVec):
 */
  __pyx_v_self->_thisptr->syncDAOptionToActuatorDVs();

  /* "pyDASolvers.pyx":232
 *         self._thisptr.convertMPIVec2SeqVec(mpiVec.vec, seqVec.vec)
 * 
 *     def syncDAOptionToActuatorDVs(self):             # <<<<<<<<<<<<<<
 *         self._thisptr.syncDAOptionToActuatorDVs()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":235
 *         self._thisptr.syncDAOptionToActuatorDVs()
 * 
 *     def updateOFField(self, Vec wVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.updateOFField(wVec.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_73updateOFField(PyObject *__pyx_v_self, PyObject *__pyx_v_wVec); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_73updateOFField(PyObject *__pyx_v_self, PyObject *__pyx_v_wVec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateOFField (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "wVec", 0))) __PYX_ERR(1, 235, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_72updateOFField(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((struct PyPetscVecObject *)__pyx_v_wVec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_72updateOFField(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_wVec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateOFField", 0);

  /* "pyDASolvers.pyx":236
 * 
 *     def updateOFField(self, Vec wVec):
 *         self._thisptr.updateOFField(wVec.vec)             # <<<<<<<<<<<<<<
 * 
 *     def updateOFMesh(self, Vec xvVec):
 */
  __pyx_v_self->_thisptr->updateOFField(__pyx_v_wVec->vec);

  /* "pyDASolvers.pyx":235
 *         self._thisptr.syncDAOptionToActuatorDVs()
 * 
 *     def updateOFField(self, Vec wVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.updateOFField(wVec.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":238
 *         self._thisptr.updateOFField(wVec.vec)
 * 
 *     def updateOFMesh(self, Vec xvVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.updateOFMesh(xvVec.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_75updateOFMesh(PyObject *__pyx_v_self, PyObject *__pyx_v_xvVec); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_75updateOFMesh(PyObject *__pyx_v_self, PyObject *__pyx_v_xvVec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateOFMesh (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 238, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_74updateOFMesh(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((struct PyPetscVecObject *)__pyx_v_xvVec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_74updateOFMesh(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateOFMesh", 0);

  /* "pyDASolvers.pyx":239
 * 
 *     def updateOFMesh(self, Vec xvVec):
 *         self._thisptr.updateOFMesh(xvVec.vec)             # <<<<<<<<<<<<<<
 * 
 *     def setdXvdFFDMat(self, Mat dXvdFFDMat):
 */
  __pyx_v_self->_thisptr->updateOFMesh(__pyx_v_xvVec->vec);

  /* "pyDASolvers.pyx":238
 *         self._thisptr.updateOFField(wVec.vec)
 * 
 *     def updateOFMesh(self, Vec xvVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.updateOFMesh(xvVec.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":241
 *         self._thisptr.updateOFMesh(xvVec.vec)
 * 
 *     def setdXvdFFDMat(self, Mat dXvdFFDMat):             # <<<<<<<<<<<<<<
 *         self._thisptr.setdXvdFFDMat(dXvdFFDMat.mat)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_77setdXvdFFDMat(PyObject *__pyx_v_self, PyObject *__pyx_v_dXvdFFDMat); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_77setdXvdFFDMat(PyObject *__pyx_v_self, PyObject *__pyx_v_dXvdFFDMat) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setdXvdFFDMat (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dXvdFFDMat), __pyx_ptype_8petsc4py_5PETSc_Mat, 1, "dXvdFFDMat", 0))) __PYX_ERR(1, 241, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_76setdXvdFFDMat(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((struct PyPetscMatObject *)__pyx_v_dXvdFFDMat));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_76setdXvdFFDMat(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscMatObject *__pyx_v_dXvdFFDMat) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setdXvdFFDMat", 0);

  /* "pyDASolvers.pyx":242
 * 
 *     def setdXvdFFDMat(self, Mat dXvdFFDMat):
 *         self._thisptr.setdXvdFFDMat(dXvdFFDMat.mat)             # <<<<<<<<<<<<<<
 * 
 *     def setFFD2XvSeedVec(self, Vec FFD2XvSeedVec):
 */
  __pyx_v_self->_thisptr->setdXvdFFDMat(__pyx_v_dXvdFFDMat->mat);

  /* "pyDASolvers.pyx":241
 *         self._thisptr.updateOFMesh(xvVec.vec)
 * 
 *     def setdXvdFFDMat(self, Mat dXvdFFDMat):             # <<<<<<<<<<<<<<
 *         self._thisptr.setdXvdFFDMat(dXvdFFDMat.mat)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":244
 *         self._thisptr.setdXvdFFDMat(dXvdFFDMat.mat)
 * 
 *     def setFFD2XvSeedVec(self, Vec FFD2XvSeedVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.setFFD2XvSeedVec(FFD2XvSeedVec.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_79setFFD2XvSeedVec(PyObject *__pyx_v_self, PyObject *__pyx_v_FFD2XvSeedVec); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_79setFFD2XvSeedVec(PyObject *__pyx_v_self, PyObject *__pyx_v_FFD2XvSeedVec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFFD2XvSeedVec (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_FFD2XvSeedVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "FFD2XvSeedVec", 0))) __PYX_ERR(1, 244, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_78setFFD2XvSeedVec(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((struct PyPetscVecObject *)__pyx_v_FFD2XvSeedVec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_78setFFD2XvSeedVec(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_FFD2XvSeedVec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFFD2XvSeedVec", 0);

  /* "pyDASolvers.pyx":245
 * 
 *     def setFFD2XvSeedVec(self, Vec FFD2XvSeedVec):
 *         self._thisptr.setFFD2XvSeedVec(FFD2XvSeedVec.vec)             # <<<<<<<<<<<<<<
 * 
 *     def getGlobalXvIndex(self, pointI, coordI):
 */
  __pyx_v_self->_thisptr->setFFD2XvSeedVec(__pyx_v_FFD2XvSeedVec->vec);

  /* "pyDASolvers.pyx":244
 *         self._thisptr.setdXvdFFDMat(dXvdFFDMat.mat)
 * 
 *     def setFFD2XvSeedVec(self, Vec FFD2XvSeedVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.setFFD2XvSeedVec(FFD2XvSeedVec.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":247
 *         self._thisptr.setFFD2XvSeedVec(FFD2XvSeedVec.vec)
 * 
 *     def getGlobalXvIndex(self, pointI, coordI):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getGlobalXvIndex(pointI, coordI)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_81getGlobalXvIndex(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_81getGlobalXvIndex(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pointI = 0;
  PyObject *__pyx_v_coordI = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGlobalXvIndex (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pointI,&__pyx_n_s_coordI,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pointI)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coordI)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getGlobalXvIndex", 1, 2, 2, 1); __PYX_ERR(1, 247, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getGlobalXvIndex") < 0)) __PYX_ERR(1, 247, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_pointI = values[0];
    __pyx_v_coordI = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getGlobalXvIndex", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 247, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.getGlobalXvIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_80getGlobalXvIndex(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_pointI, __pyx_v_coordI);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_80getGlobalXvIndex(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_pointI, PyObject *__pyx_v_coordI) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getGlobalXvIndex", 0);

  /* "pyDASolvers.pyx":248
 * 
 *     def getGlobalXvIndex(self, pointI, coordI):
 *         return self._thisptr.getGlobalXvIndex(pointI, coordI)             # <<<<<<<<<<<<<<
 * 
 *     def ofField2StateVec(self, Vec stateVec):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_pointI); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 248, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_coordI); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 248, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->_thisptr->getGlobalXvIndex(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pyDASolvers.pyx":247
 *         self._thisptr.setFFD2XvSeedVec(FFD2XvSeedVec.vec)
 * 
 *     def getGlobalXvIndex(self, pointI, coordI):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getGlobalXvIndex(pointI, coordI)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.getGlobalXvIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":250
 *         return self._thisptr.getGlobalXvIndex(pointI, coordI)
 * 
 *     def ofField2StateVec(self, Vec stateVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.ofField2StateVec(stateVec.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_83ofField2StateVec(PyObject *__pyx_v_self, PyObject *__pyx_v_stateVec); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_83ofField2StateVec(PyObject *__pyx_v_self, PyObject *__pyx_v_stateVec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ofField2StateVec (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_stateVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "stateVec", 0))) __PYX_ERR(1, 250, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_82ofField2StateVec(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((struct PyPetscVecObject *)__pyx_v_stateVec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_82ofField2StateVec(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_stateVec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ofField2StateVec", 0);

  /* "pyDASolvers.pyx":251
 * 
 *     def ofField2StateVec(self, Vec stateVec):
 *         self._thisptr.ofField2StateVec(stateVec.vec)             # <<<<<<<<<<<<<<
 * 
 *     def stateVec2OFField(self, Vec stateVec):
 */
  __pyx_v_self->_thisptr->ofField2StateVec(__pyx_v_stateVec->vec);

  /* "pyDASolvers.pyx":250
 *         return self._thisptr.getGlobalXvIndex(pointI, coordI)
 * 
 *     def ofField2StateVec(self, Vec stateVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.ofField2StateVec(stateVec.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":253
 *         self._thisptr.ofField2StateVec(stateVec.vec)
 * 
 *     def stateVec2OFField(self, Vec stateVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.stateVec2OFField(stateVec.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_85stateVec2OFField(PyObject *__pyx_v_self, PyObject *__pyx_v_stateVec); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_85stateVec2OFField(PyObject *__pyx_v_self, PyObject *__pyx_v_stateVec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stateVec2OFField (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_stateVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "stateVec", 0))) __PYX_ERR(1, 253, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_84stateVec2OFField(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((struct PyPetscVecObject *)__pyx_v_stateVec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_84stateVec2OFField(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_stateVec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stateVec2OFField", 0);

  /* "pyDASolvers.pyx":254
 * 
 *     def stateVec2OFField(self, Vec stateVec):
 *         self._thisptr.stateVec2OFField(stateVec.vec)             # <<<<<<<<<<<<<<
 * 
 *     def pointVec2OFMesh(self, Vec xvVec):
 */
  __pyx_v_self->_thisptr->stateVec2OFField(__pyx_v_stateVec->vec);

  /* "pyDASolvers.pyx":253
 *         self._thisptr.ofField2StateVec(stateVec.vec)
 * 
 *     def stateVec2OFField(self, Vec stateVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.stateVec2OFField(stateVec.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":256
 *         self._thisptr.stateVec2OFField(stateVec.vec)
 * 
 *     def pointVec2OFMesh(self, Vec xvVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.pointVec2OFMesh(xvVec.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_87pointVec2OFMesh(PyObject *__pyx_v_self, PyObject *__pyx_v_xvVec); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_87pointVec2OFMesh(PyObject *__pyx_v_self, PyObject *__pyx_v_xvVec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pointVec2OFMesh (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 256, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_86pointVec2OFMesh(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((struct PyPetscVecObject *)__pyx_v_xvVec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_86pointVec2OFMesh(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pointVec2OFMesh", 0);

  /* "pyDASolvers.pyx":257
 * 
 *     def pointVec2OFMesh(self, Vec xvVec):
 *         self._thisptr.pointVec2OFMesh(xvVec.vec)             # <<<<<<<<<<<<<<
 * 
 *     def ofMesh2PointVec(self, Vec xvVec):
 */
  __pyx_v_self->_thisptr->pointVec2OFMesh(__pyx_v_xvVec->vec);

  /* "pyDASolvers.pyx":256
 *         self._thisptr.stateVec2OFField(stateVec.vec)
 * 
 *     def pointVec2OFMesh(self, Vec xvVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.pointVec2OFMesh(xvVec.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":259
 *         self._thisptr.pointVec2OFMesh(xvVec.vec)
 * 
 *     def ofMesh2PointVec(self, Vec xvVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.ofMesh2PointVec(xvVec.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_89ofMesh2PointVec(PyObject *__pyx_v_self, PyObject *__pyx_v_xvVec); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_89ofMesh2PointVec(PyObject *__pyx_v_self, PyObject *__pyx_v_xvVec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ofMesh2PointVec (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xvVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xvVec", 0))) __PYX_ERR(1, 259, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_88ofMesh2PointVec(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((struct PyPetscVecObject *)__pyx_v_xvVec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_88ofMesh2PointVec(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xvVec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ofMesh2PointVec", 0);

  /* "pyDASolvers.pyx":260
 * 
 *     def ofMesh2PointVec(self, Vec xvVec):
 *         self._thisptr.ofMesh2PointVec(xvVec.vec)             # <<<<<<<<<<<<<<
 * 
 *     def resVec2OFResField(self, Vec rVec):
 */
  __pyx_v_self->_thisptr->ofMesh2PointVec(__pyx_v_xvVec->vec);

  /* "pyDASolvers.pyx":259
 *         self._thisptr.pointVec2OFMesh(xvVec.vec)
 * 
 *     def ofMesh2PointVec(self, Vec xvVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.ofMesh2PointVec(xvVec.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":262
 *         self._thisptr.ofMesh2PointVec(xvVec.vec)
 * 
 *     def resVec2OFResField(self, Vec rVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.resVec2OFResField(rVec.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_91resVec2OFResField(PyObject *__pyx_v_self, PyObject *__pyx_v_rVec); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_91resVec2OFResField(PyObject *__pyx_v_self, PyObject *__pyx_v_rVec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resVec2OFResField (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "rVec", 0))) __PYX_ERR(1, 262, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_90resVec2OFResField(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((struct PyPetscVecObject *)__pyx_v_rVec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_90resVec2OFResField(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_rVec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resVec2OFResField", 0);

  /* "pyDASolvers.pyx":263
 * 
 *     def resVec2OFResField(self, Vec rVec):
 *         self._thisptr.resVec2OFResField(rVec.vec)             # <<<<<<<<<<<<<<
 * 
 *     def ofResField2ResVec(self, Vec rVec):
 */
  __pyx_v_self->_thisptr->resVec2OFResField(__pyx_v_rVec->vec);

  /* "pyDASolvers.pyx":262
 *         self._thisptr.ofMesh2PointVec(xvVec.vec)
 * 
 *     def resVec2OFResField(self, Vec rVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.resVec2OFResField(rVec.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":265
 *         self._thisptr.resVec2OFResField(rVec.vec)
 * 
 *     def ofResField2ResVec(self, Vec rVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.ofResField2ResVec(rVec.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_93ofResField2ResVec(PyObject *__pyx_v_self, PyObject *__pyx_v_rVec); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_93ofResField2ResVec(PyObject *__pyx_v_self, PyObject *__pyx_v_rVec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ofResField2ResVec (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "rVec", 0))) __PYX_ERR(1, 265, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_92ofResField2ResVec(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((struct PyPetscVecObject *)__pyx_v_rVec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_92ofResField2ResVec(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_rVec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ofResField2ResVec", 0);

  /* "pyDASolvers.pyx":266
 * 
 *     def ofResField2ResVec(self, Vec rVec):
 *         self._thisptr.ofResField2ResVec(rVec.vec)             # <<<<<<<<<<<<<<
 * 
 *     def getNLocalAdjointStates(self):
 */
  __pyx_v_self->_thisptr->ofResField2ResVec(__pyx_v_rVec->vec);

  /* "pyDASolvers.pyx":265
 *         self._thisptr.resVec2OFResField(rVec.vec)
 * 
 *     def ofResField2ResVec(self, Vec rVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.ofResField2ResVec(rVec.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":268
 *         self._thisptr.ofResField2ResVec(rVec.vec)
 * 
 *     def getNLocalAdjointStates(self):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getNLocalAdjointStates()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_95getNLocalAdjointStates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_95getNLocalAdjointStates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNLocalAdjointStates (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_94getNLocalAdjointStates(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_94getNLocalAdjointStates(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNLocalAdjointStates", 0);

  /* "pyDASolvers.pyx":269
 * 
 *     def getNLocalAdjointStates(self):
 *         return self._thisptr.getNLocalAdjointStates()             # <<<<<<<<<<<<<<
 * 
 *     def getNLocalAdjointBoundaryStates(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_thisptr->getNLocalAdjointStates()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyDASolvers.pyx":268
 *         self._thisptr.ofResField2ResVec(rVec.vec)
 * 
 *     def getNLocalAdjointStates(self):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getNLocalAdjointStates()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.getNLocalAdjointStates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":271
 *         return self._thisptr.getNLocalAdjointStates()
 * 
 *     def getNLocalAdjointBoundaryStates(self):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getNLocalAdjointBoundaryStates()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_97getNLocalAdjointBoundaryStates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_97getNLocalAdjointBoundaryStates(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNLocalAdjointBoundaryStates (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_96getNLocalAdjointBoundaryStates(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_96getNLocalAdjointBoundaryStates(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNLocalAdjointBoundaryStates", 0);

  /* "pyDASolvers.pyx":272
 * 
 *     def getNLocalAdjointBoundaryStates(self):
 *         return self._thisptr.getNLocalAdjointBoundaryStates()             # <<<<<<<<<<<<<<
 * 
 *     def getNLocalCells(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_thisptr->getNLocalAdjointBoundaryStates()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyDASolvers.pyx":271
 *         return self._thisptr.getNLocalAdjointStates()
 * 
 *     def getNLocalAdjointBoundaryStates(self):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getNLocalAdjointBoundaryStates()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.getNLocalAdjointBoundaryStates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":274
 *         return self._thisptr.getNLocalAdjointBoundaryStates()
 * 
 *     def getNLocalCells(self):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getNLocalCells()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_99getNLocalCells(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_99getNLocalCells(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNLocalCells (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_98getNLocalCells(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_98getNLocalCells(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNLocalCells", 0);

  /* "pyDASolvers.pyx":275
 * 
 *     def getNLocalCells(self):
 *         return self._thisptr.getNLocalCells()             # <<<<<<<<<<<<<<
 * 
 *     def checkMesh(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_thisptr->getNLocalCells()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyDASolvers.pyx":274
 *         return self._thisptr.getNLocalAdjointBoundaryStates()
 * 
 *     def getNLocalCells(self):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getNLocalCells()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.getNLocalCells", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":277
 *         return self._thisptr.getNLocalCells()
 * 
 *     def checkMesh(self):             # <<<<<<<<<<<<<<
 *         return self._thisptr.checkMesh()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_101checkMesh(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_101checkMesh(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkMesh (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_100checkMesh(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_100checkMesh(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("checkMesh", 0);

  /* "pyDASolvers.pyx":278
 * 
 *     def checkMesh(self):
 *         return self._thisptr.checkMesh()             # <<<<<<<<<<<<<<
 * 
 *     def getObjFuncValue(self, objFuncName):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_thisptr->checkMesh()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyDASolvers.pyx":277
 *         return self._thisptr.getNLocalCells()
 * 
 *     def checkMesh(self):             # <<<<<<<<<<<<<<
 *         return self._thisptr.checkMesh()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.checkMesh", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":280
 *         return self._thisptr.checkMesh()
 * 
 *     def getObjFuncValue(self, objFuncName):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getObjFuncValue(objFuncName)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_103getObjFuncValue(PyObject *__pyx_v_self, PyObject *__pyx_v_objFuncName); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_103getObjFuncValue(PyObject *__pyx_v_self, PyObject *__pyx_v_objFuncName) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getObjFuncValue (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_102getObjFuncValue(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((PyObject *)__pyx_v_objFuncName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_102getObjFuncValue(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_objFuncName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getObjFuncValue", 0);

  /* "pyDASolvers.pyx":281
 * 
 *     def getObjFuncValue(self, objFuncName):
 *         return self._thisptr.getObjFuncValue(objFuncName)             # <<<<<<<<<<<<<<
 * 
 *     def getForces(self, Vec fX, Vec fY, Vec fZ, Vec pointList):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_objFuncName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 281, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->_thisptr->getObjFuncValue(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyDASolvers.pyx":280
 *         return self._thisptr.checkMesh()
 * 
 *     def getObjFuncValue(self, objFuncName):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getObjFuncValue(objFuncName)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.getObjFuncValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":283
 *         return self._thisptr.getObjFuncValue(objFuncName)
 * 
 *     def getForces(self, Vec fX, Vec fY, Vec fZ, Vec pointList):             # <<<<<<<<<<<<<<
 *         self._thisptr.getForces(fX.vec, fY.vec, fZ.vec, pointList.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_105getForces(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_105getForces(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_fX = 0;
  struct PyPetscVecObject *__pyx_v_fY = 0;
  struct PyPetscVecObject *__pyx_v_fZ = 0;
  struct PyPetscVecObject *__pyx_v_pointList = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getForces (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fX,&__pyx_n_s_fY,&__pyx_n_s_fZ,&__pyx_n_s_pointList,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fX)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fY)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getForces", 1, 4, 4, 1); __PYX_ERR(1, 283, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fZ)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getForces", 1, 4, 4, 2); __PYX_ERR(1, 283, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pointList)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getForces", 1, 4, 4, 3); __PYX_ERR(1, 283, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getForces") < 0)) __PYX_ERR(1, 283, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_fX = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_fY = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_fZ = ((struct PyPetscVecObject *)values[2]);
    __pyx_v_pointList = ((struct PyPetscVecObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getForces", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 283, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.getForces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fX), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "fX", 0))) __PYX_ERR(1, 283, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fY), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "fY", 0))) __PYX_ERR(1, 283, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fZ), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "fZ", 0))) __PYX_ERR(1, 283, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pointList), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "pointList", 0))) __PYX_ERR(1, 283, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_104getForces(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_fX, __pyx_v_fY, __pyx_v_fZ, __pyx_v_pointList);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_104getForces(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_fX, struct PyPetscVecObject *__pyx_v_fY, struct PyPetscVecObject *__pyx_v_fZ, struct PyPetscVecObject *__pyx_v_pointList) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getForces", 0);

  /* "pyDASolvers.pyx":284
 * 
 *     def getForces(self, Vec fX, Vec fY, Vec fZ, Vec pointList):
 *         self._thisptr.getForces(fX.vec, fY.vec, fZ.vec, pointList.vec)             # <<<<<<<<<<<<<<
 * 
 *     def printAllOptions(self):
 */
  __pyx_v_self->_thisptr->getForces(__pyx_v_fX->vec, __pyx_v_fY->vec, __pyx_v_fZ->vec, __pyx_v_pointList->vec);

  /* "pyDASolvers.pyx":283
 *         return self._thisptr.getObjFuncValue(objFuncName)
 * 
 *     def getForces(self, Vec fX, Vec fY, Vec fZ, Vec pointList):             # <<<<<<<<<<<<<<
 *         self._thisptr.getForces(fX.vec, fY.vec, fZ.vec, pointList.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":286
 *         self._thisptr.getForces(fX.vec, fY.vec, fZ.vec, pointList.vec)
 * 
 *     def printAllOptions(self):             # <<<<<<<<<<<<<<
 *         self._thisptr.printAllOptions()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_107printAllOptions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_107printAllOptions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printAllOptions (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_106printAllOptions(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_106printAllOptions(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printAllOptions", 0);

  /* "pyDASolvers.pyx":287
 * 
 *     def printAllOptions(self):
 *         self._thisptr.printAllOptions()             # <<<<<<<<<<<<<<
 * 
 *     def updateDAOption(self, pyOptions):
 */
  __pyx_v_self->_thisptr->printAllOptions();

  /* "pyDASolvers.pyx":286
 *         self._thisptr.getForces(fX.vec, fY.vec, fZ.vec, pointList.vec)
 * 
 *     def printAllOptions(self):             # <<<<<<<<<<<<<<
 *         self._thisptr.printAllOptions()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":289
 *         self._thisptr.printAllOptions()
 * 
 *     def updateDAOption(self, pyOptions):             # <<<<<<<<<<<<<<
 *         self._thisptr.updateDAOption(pyOptions)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_109updateDAOption(PyObject *__pyx_v_self, PyObject *__pyx_v_pyOptions); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_109updateDAOption(PyObject *__pyx_v_self, PyObject *__pyx_v_pyOptions) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateDAOption (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_108updateDAOption(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((PyObject *)__pyx_v_pyOptions));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_108updateDAOption(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_pyOptions) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateDAOption", 0);

  /* "pyDASolvers.pyx":290
 * 
 *     def updateDAOption(self, pyOptions):
 *         self._thisptr.updateDAOption(pyOptions)             # <<<<<<<<<<<<<<
 * 
 *     def getPrevPrimalSolTime(self):
 */
  __pyx_v_self->_thisptr->updateDAOption(__pyx_v_pyOptions);

  /* "pyDASolvers.pyx":289
 *         self._thisptr.printAllOptions()
 * 
 *     def updateDAOption(self, pyOptions):             # <<<<<<<<<<<<<<
 *         self._thisptr.updateDAOption(pyOptions)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":292
 *         self._thisptr.updateDAOption(pyOptions)
 * 
 *     def getPrevPrimalSolTime(self):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getPrevPrimalSolTime()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_111getPrevPrimalSolTime(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_111getPrevPrimalSolTime(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPrevPrimalSolTime (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_110getPrevPrimalSolTime(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_110getPrevPrimalSolTime(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPrevPrimalSolTime", 0);

  /* "pyDASolvers.pyx":293
 * 
 *     def getPrevPrimalSolTime(self):
 *         return self._thisptr.getPrevPrimalSolTime()             # <<<<<<<<<<<<<<
 * 
 *     def writeMatrixBinary(self, Mat magIn, prefix):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_thisptr->getPrevPrimalSolTime()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyDASolvers.pyx":292
 *         self._thisptr.updateDAOption(pyOptions)
 * 
 *     def getPrevPrimalSolTime(self):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getPrevPrimalSolTime()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.getPrevPrimalSolTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":295
 *         return self._thisptr.getPrevPrimalSolTime()
 * 
 *     def writeMatrixBinary(self, Mat magIn, prefix):             # <<<<<<<<<<<<<<
 *         self._thisptr.writeMatrixBinary(magIn.mat, prefix)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_113writeMatrixBinary(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_113writeMatrixBinary(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscMatObject *__pyx_v_magIn = 0;
  PyObject *__pyx_v_prefix = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeMatrixBinary (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_magIn,&__pyx_n_s_prefix,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_magIn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeMatrixBinary", 1, 2, 2, 1); __PYX_ERR(1, 295, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeMatrixBinary") < 0)) __PYX_ERR(1, 295, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_magIn = ((struct PyPetscMatObject *)values[0]);
    __pyx_v_prefix = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeMatrixBinary", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 295, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.writeMatrixBinary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_magIn), __pyx_ptype_8petsc4py_5PETSc_Mat, 1, "magIn", 0))) __PYX_ERR(1, 295, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_112writeMatrixBinary(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_magIn, __pyx_v_prefix);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_112writeMatrixBinary(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscMatObject *__pyx_v_magIn, PyObject *__pyx_v_prefix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeMatrixBinary", 0);

  /* "pyDASolvers.pyx":296
 * 
 *     def writeMatrixBinary(self, Mat magIn, prefix):
 *         self._thisptr.writeMatrixBinary(magIn.mat, prefix)             # <<<<<<<<<<<<<<
 * 
 *     def writeMatrixASCII(self, Mat magIn, prefix):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_prefix); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 296, __pyx_L1_error)
  __pyx_v_self->_thisptr->writeMatrixBinary(__pyx_v_magIn->mat, __pyx_t_1);

  /* "pyDASolvers.pyx":295
 *         return self._thisptr.getPrevPrimalSolTime()
 * 
 *     def writeMatrixBinary(self, Mat magIn, prefix):             # <<<<<<<<<<<<<<
 *         self._thisptr.writeMatrixBinary(magIn.mat, prefix)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.writeMatrixBinary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":298
 *         self._thisptr.writeMatrixBinary(magIn.mat, prefix)
 * 
 *     def writeMatrixASCII(self, Mat magIn, prefix):             # <<<<<<<<<<<<<<
 *         self._thisptr.writeMatrixASCII(magIn.mat, prefix)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_115writeMatrixASCII(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_115writeMatrixASCII(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscMatObject *__pyx_v_magIn = 0;
  PyObject *__pyx_v_prefix = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeMatrixASCII (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_magIn,&__pyx_n_s_prefix,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_magIn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeMatrixASCII", 1, 2, 2, 1); __PYX_ERR(1, 298, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeMatrixASCII") < 0)) __PYX_ERR(1, 298, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_magIn = ((struct PyPetscMatObject *)values[0]);
    __pyx_v_prefix = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeMatrixASCII", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 298, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.writeMatrixASCII", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_magIn), __pyx_ptype_8petsc4py_5PETSc_Mat, 1, "magIn", 0))) __PYX_ERR(1, 298, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_114writeMatrixASCII(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_magIn, __pyx_v_prefix);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_114writeMatrixASCII(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscMatObject *__pyx_v_magIn, PyObject *__pyx_v_prefix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeMatrixASCII", 0);

  /* "pyDASolvers.pyx":299
 * 
 *     def writeMatrixASCII(self, Mat magIn, prefix):
 *         self._thisptr.writeMatrixASCII(magIn.mat, prefix)             # <<<<<<<<<<<<<<
 * 
 *     def readMatrixBinary(self, Mat magIn, prefix):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_prefix); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 299, __pyx_L1_error)
  __pyx_v_self->_thisptr->writeMatrixASCII(__pyx_v_magIn->mat, __pyx_t_1);

  /* "pyDASolvers.pyx":298
 *         self._thisptr.writeMatrixBinary(magIn.mat, prefix)
 * 
 *     def writeMatrixASCII(self, Mat magIn, prefix):             # <<<<<<<<<<<<<<
 *         self._thisptr.writeMatrixASCII(magIn.mat, prefix)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.writeMatrixASCII", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":301
 *         self._thisptr.writeMatrixASCII(magIn.mat, prefix)
 * 
 *     def readMatrixBinary(self, Mat magIn, prefix):             # <<<<<<<<<<<<<<
 *         self._thisptr.readMatrixBinary(magIn.mat, prefix)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_117readMatrixBinary(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_117readMatrixBinary(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscMatObject *__pyx_v_magIn = 0;
  PyObject *__pyx_v_prefix = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readMatrixBinary (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_magIn,&__pyx_n_s_prefix,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_magIn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readMatrixBinary", 1, 2, 2, 1); __PYX_ERR(1, 301, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readMatrixBinary") < 0)) __PYX_ERR(1, 301, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_magIn = ((struct PyPetscMatObject *)values[0]);
    __pyx_v_prefix = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readMatrixBinary", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 301, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.readMatrixBinary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_magIn), __pyx_ptype_8petsc4py_5PETSc_Mat, 1, "magIn", 0))) __PYX_ERR(1, 301, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_116readMatrixBinary(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_magIn, __pyx_v_prefix);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_116readMatrixBinary(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscMatObject *__pyx_v_magIn, PyObject *__pyx_v_prefix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readMatrixBinary", 0);

  /* "pyDASolvers.pyx":302
 * 
 *     def readMatrixBinary(self, Mat magIn, prefix):
 *         self._thisptr.readMatrixBinary(magIn.mat, prefix)             # <<<<<<<<<<<<<<
 * 
 *     def writeVectorASCII(self, Vec vecIn, prefix):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_prefix); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 302, __pyx_L1_error)
  __pyx_v_self->_thisptr->readMatrixBinary(__pyx_v_magIn->mat, __pyx_t_1);

  /* "pyDASolvers.pyx":301
 *         self._thisptr.writeMatrixASCII(magIn.mat, prefix)
 * 
 *     def readMatrixBinary(self, Mat magIn, prefix):             # <<<<<<<<<<<<<<
 *         self._thisptr.readMatrixBinary(magIn.mat, prefix)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.readMatrixBinary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":304
 *         self._thisptr.readMatrixBinary(magIn.mat, prefix)
 * 
 *     def writeVectorASCII(self, Vec vecIn, prefix):             # <<<<<<<<<<<<<<
 *         self._thisptr.writeVectorASCII(vecIn.vec, prefix)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_119writeVectorASCII(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_119writeVectorASCII(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_vecIn = 0;
  PyObject *__pyx_v_prefix = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeVectorASCII (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vecIn,&__pyx_n_s_prefix,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vecIn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeVectorASCII", 1, 2, 2, 1); __PYX_ERR(1, 304, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeVectorASCII") < 0)) __PYX_ERR(1, 304, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_vecIn = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_prefix = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeVectorASCII", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 304, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.writeVectorASCII", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vecIn), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "vecIn", 0))) __PYX_ERR(1, 304, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_118writeVectorASCII(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_vecIn, __pyx_v_prefix);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_118writeVectorASCII(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_vecIn, PyObject *__pyx_v_prefix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeVectorASCII", 0);

  /* "pyDASolvers.pyx":305
 * 
 *     def writeVectorASCII(self, Vec vecIn, prefix):
 *         self._thisptr.writeVectorASCII(vecIn.vec, prefix)             # <<<<<<<<<<<<<<
 * 
 *     def readVectorBinary(self, Vec vecIn, prefix):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_prefix); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 305, __pyx_L1_error)
  __pyx_v_self->_thisptr->writeVectorASCII(__pyx_v_vecIn->vec, __pyx_t_1);

  /* "pyDASolvers.pyx":304
 *         self._thisptr.readMatrixBinary(magIn.mat, prefix)
 * 
 *     def writeVectorASCII(self, Vec vecIn, prefix):             # <<<<<<<<<<<<<<
 *         self._thisptr.writeVectorASCII(vecIn.vec, prefix)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.writeVectorASCII", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":307
 *         self._thisptr.writeVectorASCII(vecIn.vec, prefix)
 * 
 *     def readVectorBinary(self, Vec vecIn, prefix):             # <<<<<<<<<<<<<<
 *         self._thisptr.readVectorBinary(vecIn.vec, prefix)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_121readVectorBinary(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_121readVectorBinary(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_vecIn = 0;
  PyObject *__pyx_v_prefix = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readVectorBinary (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vecIn,&__pyx_n_s_prefix,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vecIn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readVectorBinary", 1, 2, 2, 1); __PYX_ERR(1, 307, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "readVectorBinary") < 0)) __PYX_ERR(1, 307, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_vecIn = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_prefix = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readVectorBinary", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 307, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.readVectorBinary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vecIn), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "vecIn", 0))) __PYX_ERR(1, 307, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_120readVectorBinary(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_vecIn, __pyx_v_prefix);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_120readVectorBinary(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_vecIn, PyObject *__pyx_v_prefix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readVectorBinary", 0);

  /* "pyDASolvers.pyx":308
 * 
 *     def readVectorBinary(self, Vec vecIn, prefix):
 *         self._thisptr.readVectorBinary(vecIn.vec, prefix)             # <<<<<<<<<<<<<<
 * 
 *     def writeVectorBinary(self, Vec vecIn, prefix):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_prefix); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 308, __pyx_L1_error)
  __pyx_v_self->_thisptr->readVectorBinary(__pyx_v_vecIn->vec, __pyx_t_1);

  /* "pyDASolvers.pyx":307
 *         self._thisptr.writeVectorASCII(vecIn.vec, prefix)
 * 
 *     def readVectorBinary(self, Vec vecIn, prefix):             # <<<<<<<<<<<<<<
 *         self._thisptr.readVectorBinary(vecIn.vec, prefix)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.readVectorBinary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":310
 *         self._thisptr.readVectorBinary(vecIn.vec, prefix)
 * 
 *     def writeVectorBinary(self, Vec vecIn, prefix):             # <<<<<<<<<<<<<<
 *         self._thisptr.writeVectorBinary(vecIn.vec, prefix)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_123writeVectorBinary(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_123writeVectorBinary(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_vecIn = 0;
  PyObject *__pyx_v_prefix = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeVectorBinary (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vecIn,&__pyx_n_s_prefix,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vecIn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("writeVectorBinary", 1, 2, 2, 1); __PYX_ERR(1, 310, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "writeVectorBinary") < 0)) __PYX_ERR(1, 310, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_vecIn = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_prefix = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeVectorBinary", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 310, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.writeVectorBinary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vecIn), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "vecIn", 0))) __PYX_ERR(1, 310, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_122writeVectorBinary(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_vecIn, __pyx_v_prefix);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_122writeVectorBinary(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_vecIn, PyObject *__pyx_v_prefix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeVectorBinary", 0);

  /* "pyDASolvers.pyx":311
 * 
 *     def writeVectorBinary(self, Vec vecIn, prefix):
 *         self._thisptr.writeVectorBinary(vecIn.vec, prefix)             # <<<<<<<<<<<<<<
 * 
 *     def setTimeInstanceField(self, instanceI):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_prefix); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 311, __pyx_L1_error)
  __pyx_v_self->_thisptr->writeVectorBinary(__pyx_v_vecIn->vec, __pyx_t_1);

  /* "pyDASolvers.pyx":310
 *         self._thisptr.readVectorBinary(vecIn.vec, prefix)
 * 
 *     def writeVectorBinary(self, Vec vecIn, prefix):             # <<<<<<<<<<<<<<
 *         self._thisptr.writeVectorBinary(vecIn.vec, prefix)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.writeVectorBinary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":313
 *         self._thisptr.writeVectorBinary(vecIn.vec, prefix)
 * 
 *     def setTimeInstanceField(self, instanceI):             # <<<<<<<<<<<<<<
 *         self._thisptr.setTimeInstanceField(instanceI)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_125setTimeInstanceField(PyObject *__pyx_v_self, PyObject *__pyx_v_instanceI); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_125setTimeInstanceField(PyObject *__pyx_v_self, PyObject *__pyx_v_instanceI) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTimeInstanceField (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_124setTimeInstanceField(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((PyObject *)__pyx_v_instanceI));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_124setTimeInstanceField(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_instanceI) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setTimeInstanceField", 0);

  /* "pyDASolvers.pyx":314
 * 
 *     def setTimeInstanceField(self, instanceI):
 *         self._thisptr.setTimeInstanceField(instanceI)             # <<<<<<<<<<<<<<
 * 
 *     def setTimeInstanceVar(self, mode, Mat stateMat, Mat stateBCMat, Vec timeVec, Vec timeIdxVec):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_instanceI); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 314, __pyx_L1_error)
  __pyx_v_self->_thisptr->setTimeInstanceField(__pyx_t_1);

  /* "pyDASolvers.pyx":313
 *         self._thisptr.writeVectorBinary(vecIn.vec, prefix)
 * 
 *     def setTimeInstanceField(self, instanceI):             # <<<<<<<<<<<<<<
 *         self._thisptr.setTimeInstanceField(instanceI)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.setTimeInstanceField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":316
 *         self._thisptr.setTimeInstanceField(instanceI)
 * 
 *     def setTimeInstanceVar(self, mode, Mat stateMat, Mat stateBCMat, Vec timeVec, Vec timeIdxVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.setTimeInstanceVar(mode, stateMat.mat, stateBCMat.mat, timeVec.vec, timeIdxVec.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_127setTimeInstanceVar(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_127setTimeInstanceVar(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mode = 0;
  struct PyPetscMatObject *__pyx_v_stateMat = 0;
  struct PyPetscMatObject *__pyx_v_stateBCMat = 0;
  struct PyPetscVecObject *__pyx_v_timeVec = 0;
  struct PyPetscVecObject *__pyx_v_timeIdxVec = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTimeInstanceVar (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mode,&__pyx_n_s_stateMat,&__pyx_n_s_stateBCMat,&__pyx_n_s_timeVec,&__pyx_n_s_timeIdxVec,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stateMat)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setTimeInstanceVar", 1, 5, 5, 1); __PYX_ERR(1, 316, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stateBCMat)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setTimeInstanceVar", 1, 5, 5, 2); __PYX_ERR(1, 316, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timeVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setTimeInstanceVar", 1, 5, 5, 3); __PYX_ERR(1, 316, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timeIdxVec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setTimeInstanceVar", 1, 5, 5, 4); __PYX_ERR(1, 316, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setTimeInstanceVar") < 0)) __PYX_ERR(1, 316, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_mode = values[0];
    __pyx_v_stateMat = ((struct PyPetscMatObject *)values[1]);
    __pyx_v_stateBCMat = ((struct PyPetscMatObject *)values[2]);
    __pyx_v_timeVec = ((struct PyPetscVecObject *)values[3]);
    __pyx_v_timeIdxVec = ((struct PyPetscVecObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setTimeInstanceVar", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 316, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.setTimeInstanceVar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_stateMat), __pyx_ptype_8petsc4py_5PETSc_Mat, 1, "stateMat", 0))) __PYX_ERR(1, 316, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_stateBCMat), __pyx_ptype_8petsc4py_5PETSc_Mat, 1, "stateBCMat", 0))) __PYX_ERR(1, 316, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timeVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "timeVec", 0))) __PYX_ERR(1, 316, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timeIdxVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "timeIdxVec", 0))) __PYX_ERR(1, 316, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_126setTimeInstanceVar(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_mode, __pyx_v_stateMat, __pyx_v_stateBCMat, __pyx_v_timeVec, __pyx_v_timeIdxVec);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_126setTimeInstanceVar(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_mode, struct PyPetscMatObject *__pyx_v_stateMat, struct PyPetscMatObject *__pyx_v_stateBCMat, struct PyPetscVecObject *__pyx_v_timeVec, struct PyPetscVecObject *__pyx_v_timeIdxVec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setTimeInstanceVar", 0);

  /* "pyDASolvers.pyx":317
 * 
 *     def setTimeInstanceVar(self, mode, Mat stateMat, Mat stateBCMat, Vec timeVec, Vec timeIdxVec):
 *         self._thisptr.setTimeInstanceVar(mode, stateMat.mat, stateBCMat.mat, timeVec.vec, timeIdxVec.vec)             # <<<<<<<<<<<<<<
 * 
 *     def getTimeInstanceObjFunc(self, instanceI, objFuncName):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_mode); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 317, __pyx_L1_error)
  __pyx_v_self->_thisptr->setTimeInstanceVar(__pyx_t_1, __pyx_v_stateMat->mat, __pyx_v_stateBCMat->mat, __pyx_v_timeVec->vec, __pyx_v_timeIdxVec->vec);

  /* "pyDASolvers.pyx":316
 *         self._thisptr.setTimeInstanceField(instanceI)
 * 
 *     def setTimeInstanceVar(self, mode, Mat stateMat, Mat stateBCMat, Vec timeVec, Vec timeIdxVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.setTimeInstanceVar(mode, stateMat.mat, stateBCMat.mat, timeVec.vec, timeIdxVec.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.setTimeInstanceVar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":319
 *         self._thisptr.setTimeInstanceVar(mode, stateMat.mat, stateBCMat.mat, timeVec.vec, timeIdxVec.vec)
 * 
 *     def getTimeInstanceObjFunc(self, instanceI, objFuncName):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getTimeInstanceObjFunc(instanceI, objFuncName)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_129getTimeInstanceObjFunc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_129getTimeInstanceObjFunc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_instanceI = 0;
  PyObject *__pyx_v_objFuncName = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTimeInstanceObjFunc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_instanceI,&__pyx_n_s_objFuncName,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_instanceI)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objFuncName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getTimeInstanceObjFunc", 1, 2, 2, 1); __PYX_ERR(1, 319, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getTimeInstanceObjFunc") < 0)) __PYX_ERR(1, 319, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_instanceI = values[0];
    __pyx_v_objFuncName = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getTimeInstanceObjFunc", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 319, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.getTimeInstanceObjFunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_128getTimeInstanceObjFunc(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_instanceI, __pyx_v_objFuncName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_128getTimeInstanceObjFunc(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_instanceI, PyObject *__pyx_v_objFuncName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTimeInstanceObjFunc", 0);

  /* "pyDASolvers.pyx":320
 * 
 *     def getTimeInstanceObjFunc(self, instanceI, objFuncName):
 *         return self._thisptr.getTimeInstanceObjFunc(instanceI, objFuncName)             # <<<<<<<<<<<<<<
 * 
 *     def setFieldValue4GlobalCellI(self, fieldName, val, globalCellI, compI = 0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_instanceI); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 320, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_objFuncName); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 320, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_thisptr->getTimeInstanceObjFunc(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pyDASolvers.pyx":319
 *         self._thisptr.setTimeInstanceVar(mode, stateMat.mat, stateBCMat.mat, timeVec.vec, timeIdxVec.vec)
 * 
 *     def getTimeInstanceObjFunc(self, instanceI, objFuncName):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getTimeInstanceObjFunc(instanceI, objFuncName)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.getTimeInstanceObjFunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":322
 *         return self._thisptr.getTimeInstanceObjFunc(instanceI, objFuncName)
 * 
 *     def setFieldValue4GlobalCellI(self, fieldName, val, globalCellI, compI = 0):             # <<<<<<<<<<<<<<
 *         self._thisptr.setFieldValue4GlobalCellI(fieldName, val, globalCellI, compI)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_131setFieldValue4GlobalCellI(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_131setFieldValue4GlobalCellI(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fieldName = 0;
  PyObject *__pyx_v_val = 0;
  PyObject *__pyx_v_globalCellI = 0;
  PyObject *__pyx_v_compI = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setFieldValue4GlobalCellI (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fieldName,&__pyx_n_s_val,&__pyx_n_s_globalCellI,&__pyx_n_s_compI,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fieldName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setFieldValue4GlobalCellI", 0, 3, 4, 1); __PYX_ERR(1, 322, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_globalCellI)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setFieldValue4GlobalCellI", 0, 3, 4, 2); __PYX_ERR(1, 322, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_compI);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setFieldValue4GlobalCellI") < 0)) __PYX_ERR(1, 322, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fieldName = values[0];
    __pyx_v_val = values[1];
    __pyx_v_globalCellI = values[2];
    __pyx_v_compI = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setFieldValue4GlobalCellI", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 322, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.setFieldValue4GlobalCellI", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_130setFieldValue4GlobalCellI(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_fieldName, __pyx_v_val, __pyx_v_globalCellI, __pyx_v_compI);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_130setFieldValue4GlobalCellI(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_fieldName, PyObject *__pyx_v_val, PyObject *__pyx_v_globalCellI, PyObject *__pyx_v_compI) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setFieldValue4GlobalCellI", 0);

  /* "pyDASolvers.pyx":323
 * 
 *     def setFieldValue4GlobalCellI(self, fieldName, val, globalCellI, compI = 0):
 *         self._thisptr.setFieldValue4GlobalCellI(fieldName, val, globalCellI, compI)             # <<<<<<<<<<<<<<
 * 
 *     def updateBoundaryConditions(self, fieldName, fieldType):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_fieldName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 323, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_val); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 323, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_globalCellI); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 323, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_compI); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 323, __pyx_L1_error)
  __pyx_v_self->_thisptr->setFieldValue4GlobalCellI(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);

  /* "pyDASolvers.pyx":322
 *         return self._thisptr.getTimeInstanceObjFunc(instanceI, objFuncName)
 * 
 *     def setFieldValue4GlobalCellI(self, fieldName, val, globalCellI, compI = 0):             # <<<<<<<<<<<<<<
 *         self._thisptr.setFieldValue4GlobalCellI(fieldName, val, globalCellI, compI)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.setFieldValue4GlobalCellI", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":325
 *         self._thisptr.setFieldValue4GlobalCellI(fieldName, val, globalCellI, compI)
 * 
 *     def updateBoundaryConditions(self, fieldName, fieldType):             # <<<<<<<<<<<<<<
 *         self._thisptr.updateBoundaryConditions(fieldName, fieldType)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_133updateBoundaryConditions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_133updateBoundaryConditions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fieldName = 0;
  PyObject *__pyx_v_fieldType = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateBoundaryConditions (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fieldName,&__pyx_n_s_fieldType,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fieldName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fieldType)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("updateBoundaryConditions", 1, 2, 2, 1); __PYX_ERR(1, 325, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "updateBoundaryConditions") < 0)) __PYX_ERR(1, 325, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_fieldName = values[0];
    __pyx_v_fieldType = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("updateBoundaryConditions", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 325, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.updateBoundaryConditions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_132updateBoundaryConditions(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_fieldName, __pyx_v_fieldType);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_132updateBoundaryConditions(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_fieldName, PyObject *__pyx_v_fieldType) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("updateBoundaryConditions", 0);

  /* "pyDASolvers.pyx":326
 * 
 *     def updateBoundaryConditions(self, fieldName, fieldType):
 *         self._thisptr.updateBoundaryConditions(fieldName, fieldType)             # <<<<<<<<<<<<<<
 * 
 *     def calcPrimalResidualStatistics(self, mode):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_fieldName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 326, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_fieldType); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 326, __pyx_L1_error)
  __pyx_v_self->_thisptr->updateBoundaryConditions(__pyx_t_1, __pyx_t_2);

  /* "pyDASolvers.pyx":325
 *         self._thisptr.setFieldValue4GlobalCellI(fieldName, val, globalCellI, compI)
 * 
 *     def updateBoundaryConditions(self, fieldName, fieldType):             # <<<<<<<<<<<<<<
 *         self._thisptr.updateBoundaryConditions(fieldName, fieldType)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.updateBoundaryConditions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":328
 *         self._thisptr.updateBoundaryConditions(fieldName, fieldType)
 * 
 *     def calcPrimalResidualStatistics(self, mode):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcPrimalResidualStatistics(mode)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_135calcPrimalResidualStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_mode); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_135calcPrimalResidualStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_mode) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcPrimalResidualStatistics (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_134calcPrimalResidualStatistics(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((PyObject *)__pyx_v_mode));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_134calcPrimalResidualStatistics(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcPrimalResidualStatistics", 0);

  /* "pyDASolvers.pyx":329
 * 
 *     def calcPrimalResidualStatistics(self, mode):
 *         self._thisptr.calcPrimalResidualStatistics(mode)             # <<<<<<<<<<<<<<
 * 
 *     def getForwardADDerivVal(self, objFuncName):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_mode); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 329, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcPrimalResidualStatistics(__pyx_t_1);

  /* "pyDASolvers.pyx":328
 *         self._thisptr.updateBoundaryConditions(fieldName, fieldType)
 * 
 *     def calcPrimalResidualStatistics(self, mode):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcPrimalResidualStatistics(mode)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcPrimalResidualStatistics", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":331
 *         self._thisptr.calcPrimalResidualStatistics(mode)
 * 
 *     def getForwardADDerivVal(self, objFuncName):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getForwardADDerivVal(objFuncName)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_137getForwardADDerivVal(PyObject *__pyx_v_self, PyObject *__pyx_v_objFuncName); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_137getForwardADDerivVal(PyObject *__pyx_v_self, PyObject *__pyx_v_objFuncName) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getForwardADDerivVal (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_136getForwardADDerivVal(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((PyObject *)__pyx_v_objFuncName));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_136getForwardADDerivVal(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_objFuncName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getForwardADDerivVal", 0);

  /* "pyDASolvers.pyx":332
 * 
 *     def getForwardADDerivVal(self, objFuncName):
 *         return self._thisptr.getForwardADDerivVal(objFuncName)             # <<<<<<<<<<<<<<
 * 
 *     def calcResidualVec(self, Vec resVec):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_objFuncName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 332, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->_thisptr->getForwardADDerivVal(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyDASolvers.pyx":331
 *         self._thisptr.calcPrimalResidualStatistics(mode)
 * 
 *     def getForwardADDerivVal(self, objFuncName):             # <<<<<<<<<<<<<<
 *         return self._thisptr.getForwardADDerivVal(objFuncName)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.getForwardADDerivVal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":334
 *         return self._thisptr.getForwardADDerivVal(objFuncName)
 * 
 *     def calcResidualVec(self, Vec resVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcResidualVec(resVec.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_139calcResidualVec(PyObject *__pyx_v_self, PyObject *__pyx_v_resVec); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_139calcResidualVec(PyObject *__pyx_v_self, PyObject *__pyx_v_resVec) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcResidualVec (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_resVec), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "resVec", 0))) __PYX_ERR(1, 334, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_138calcResidualVec(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((struct PyPetscVecObject *)__pyx_v_resVec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_138calcResidualVec(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_resVec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcResidualVec", 0);

  /* "pyDASolvers.pyx":335
 * 
 *     def calcResidualVec(self, Vec resVec):
 *         self._thisptr.calcResidualVec(resVec.vec)             # <<<<<<<<<<<<<<
 * 
 *     def setPrimalBoundaryConditions(self, printInfo):
 */
  __pyx_v_self->_thisptr->calcResidualVec(__pyx_v_resVec->vec);

  /* "pyDASolvers.pyx":334
 *         return self._thisptr.getForwardADDerivVal(objFuncName)
 * 
 *     def calcResidualVec(self, Vec resVec):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcResidualVec(resVec.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":337
 *         self._thisptr.calcResidualVec(resVec.vec)
 * 
 *     def setPrimalBoundaryConditions(self, printInfo):             # <<<<<<<<<<<<<<
 *         self._thisptr.setPrimalBoundaryConditions(printInfo)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_141setPrimalBoundaryConditions(PyObject *__pyx_v_self, PyObject *__pyx_v_printInfo); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_141setPrimalBoundaryConditions(PyObject *__pyx_v_self, PyObject *__pyx_v_printInfo) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPrimalBoundaryConditions (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_140setPrimalBoundaryConditions(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((PyObject *)__pyx_v_printInfo));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_140setPrimalBoundaryConditions(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_printInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPrimalBoundaryConditions", 0);

  /* "pyDASolvers.pyx":338
 * 
 *     def setPrimalBoundaryConditions(self, printInfo):
 *         self._thisptr.setPrimalBoundaryConditions(printInfo)             # <<<<<<<<<<<<<<
 * 
 *     def calcFvSource(self, Vec aForce, Vec tForce, Vec rDistExt, Vec targetForce, Vec center, Vec fvSource):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_printInfo); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 338, __pyx_L1_error)
  __pyx_v_self->_thisptr->setPrimalBoundaryConditions(__pyx_t_1);

  /* "pyDASolvers.pyx":337
 *         self._thisptr.calcResidualVec(resVec.vec)
 * 
 *     def setPrimalBoundaryConditions(self, printInfo):             # <<<<<<<<<<<<<<
 *         self._thisptr.setPrimalBoundaryConditions(printInfo)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.setPrimalBoundaryConditions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":340
 *         self._thisptr.setPrimalBoundaryConditions(printInfo)
 * 
 *     def calcFvSource(self, Vec aForce, Vec tForce, Vec rDistExt, Vec targetForce, Vec center, Vec fvSource):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcFvSource(aForce.vec, tForce.vec, rDistExt.vec, targetForce.vec, center.vec, fvSource.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_143calcFvSource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_143calcFvSource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_aForce = 0;
  struct PyPetscVecObject *__pyx_v_tForce = 0;
  struct PyPetscVecObject *__pyx_v_rDistExt = 0;
  struct PyPetscVecObject *__pyx_v_targetForce = 0;
  struct PyPetscVecObject *__pyx_v_center = 0;
  struct PyPetscVecObject *__pyx_v_fvSource = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcFvSource (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_aForce,&__pyx_n_s_tForce,&__pyx_n_s_rDistExt,&__pyx_n_s_targetForce,&__pyx_n_s_center,&__pyx_n_s_fvSource,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aForce)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tForce)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcFvSource", 1, 6, 6, 1); __PYX_ERR(1, 340, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rDistExt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcFvSource", 1, 6, 6, 2); __PYX_ERR(1, 340, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_targetForce)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcFvSource", 1, 6, 6, 3); __PYX_ERR(1, 340, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_center)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcFvSource", 1, 6, 6, 4); __PYX_ERR(1, 340, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fvSource)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcFvSource", 1, 6, 6, 5); __PYX_ERR(1, 340, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcFvSource") < 0)) __PYX_ERR(1, 340, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_aForce = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_tForce = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_rDistExt = ((struct PyPetscVecObject *)values[2]);
    __pyx_v_targetForce = ((struct PyPetscVecObject *)values[3]);
    __pyx_v_center = ((struct PyPetscVecObject *)values[4]);
    __pyx_v_fvSource = ((struct PyPetscVecObject *)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcFvSource", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 340, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcFvSource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aForce), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "aForce", 0))) __PYX_ERR(1, 340, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tForce), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "tForce", 0))) __PYX_ERR(1, 340, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rDistExt), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "rDistExt", 0))) __PYX_ERR(1, 340, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_targetForce), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "targetForce", 0))) __PYX_ERR(1, 340, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_center), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "center", 0))) __PYX_ERR(1, 340, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fvSource), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "fvSource", 0))) __PYX_ERR(1, 340, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_142calcFvSource(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_aForce, __pyx_v_tForce, __pyx_v_rDistExt, __pyx_v_targetForce, __pyx_v_center, __pyx_v_fvSource);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_142calcFvSource(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_aForce, struct PyPetscVecObject *__pyx_v_tForce, struct PyPetscVecObject *__pyx_v_rDistExt, struct PyPetscVecObject *__pyx_v_targetForce, struct PyPetscVecObject *__pyx_v_center, struct PyPetscVecObject *__pyx_v_fvSource) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcFvSource", 0);

  /* "pyDASolvers.pyx":341
 * 
 *     def calcFvSource(self, Vec aForce, Vec tForce, Vec rDistExt, Vec targetForce, Vec center, Vec fvSource):
 *         self._thisptr.calcFvSource(aForce.vec, tForce.vec, rDistExt.vec, targetForce.vec, center.vec, fvSource.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdFvSourcedInputsTPsiAD(self, mode, Vec c, Vec r, Vec f, Vec psi, Vec prod):
 */
  __pyx_v_self->_thisptr->calcFvSource(__pyx_v_aForce->vec, __pyx_v_tForce->vec, __pyx_v_rDistExt->vec, __pyx_v_targetForce->vec, __pyx_v_center->vec, __pyx_v_fvSource->vec);

  /* "pyDASolvers.pyx":340
 *         self._thisptr.setPrimalBoundaryConditions(printInfo)
 * 
 *     def calcFvSource(self, Vec aForce, Vec tForce, Vec rDistExt, Vec targetForce, Vec center, Vec fvSource):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcFvSource(aForce.vec, tForce.vec, rDistExt.vec, targetForce.vec, center.vec, fvSource.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":343
 *         self._thisptr.calcFvSource(aForce.vec, tForce.vec, rDistExt.vec, targetForce.vec, center.vec, fvSource.vec)
 * 
 *     def calcdFvSourcedInputsTPsiAD(self, mode, Vec c, Vec r, Vec f, Vec psi, Vec prod):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFvSourcedInputsTPsiAD(mode, c.vec, r.vec, f.vec, psi.vec, prod.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_145calcdFvSourcedInputsTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_145calcdFvSourcedInputsTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mode = 0;
  struct PyPetscVecObject *__pyx_v_c = 0;
  struct PyPetscVecObject *__pyx_v_r = 0;
  struct PyPetscVecObject *__pyx_v_f = 0;
  struct PyPetscVecObject *__pyx_v_psi = 0;
  struct PyPetscVecObject *__pyx_v_prod = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdFvSourcedInputsTPsiAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mode,&__pyx_n_s_c,&__pyx_n_s_r,&__pyx_n_s_f,&__pyx_n_s_psi,&__pyx_n_s_prod,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFvSourcedInputsTPsiAD", 1, 6, 6, 1); __PYX_ERR(1, 343, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFvSourcedInputsTPsiAD", 1, 6, 6, 2); __PYX_ERR(1, 343, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_f)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFvSourcedInputsTPsiAD", 1, 6, 6, 3); __PYX_ERR(1, 343, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_psi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFvSourcedInputsTPsiAD", 1, 6, 6, 4); __PYX_ERR(1, 343, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prod)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdFvSourcedInputsTPsiAD", 1, 6, 6, 5); __PYX_ERR(1, 343, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdFvSourcedInputsTPsiAD") < 0)) __PYX_ERR(1, 343, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_mode = values[0];
    __pyx_v_c = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_r = ((struct PyPetscVecObject *)values[2]);
    __pyx_v_f = ((struct PyPetscVecObject *)values[3]);
    __pyx_v_psi = ((struct PyPetscVecObject *)values[4]);
    __pyx_v_prod = ((struct PyPetscVecObject *)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdFvSourcedInputsTPsiAD", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 343, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFvSourcedInputsTPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "c", 0))) __PYX_ERR(1, 343, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "r", 0))) __PYX_ERR(1, 343, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_f), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "f", 0))) __PYX_ERR(1, 343, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_psi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "psi", 0))) __PYX_ERR(1, 343, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prod), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "prod", 0))) __PYX_ERR(1, 343, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_144calcdFvSourcedInputsTPsiAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_mode, __pyx_v_c, __pyx_v_r, __pyx_v_f, __pyx_v_psi, __pyx_v_prod);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_144calcdFvSourcedInputsTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_mode, struct PyPetscVecObject *__pyx_v_c, struct PyPetscVecObject *__pyx_v_r, struct PyPetscVecObject *__pyx_v_f, struct PyPetscVecObject *__pyx_v_psi, struct PyPetscVecObject *__pyx_v_prod) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdFvSourcedInputsTPsiAD", 0);

  /* "pyDASolvers.pyx":344
 * 
 *     def calcdFvSourcedInputsTPsiAD(self, mode, Vec c, Vec r, Vec f, Vec psi, Vec prod):
 *         self._thisptr.calcdFvSourcedInputsTPsiAD(mode, c.vec, r.vec, f.vec, psi.vec, prod.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcForceProfile(self, Vec xv, Vec state, Vec forceProfile, Vec radiusProfile):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_mode); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 344, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdFvSourcedInputsTPsiAD(__pyx_t_1, __pyx_v_c->vec, __pyx_v_r->vec, __pyx_v_f->vec, __pyx_v_psi->vec, __pyx_v_prod->vec);

  /* "pyDASolvers.pyx":343
 *         self._thisptr.calcFvSource(aForce.vec, tForce.vec, rDistExt.vec, targetForce.vec, center.vec, fvSource.vec)
 * 
 *     def calcdFvSourcedInputsTPsiAD(self, mode, Vec c, Vec r, Vec f, Vec psi, Vec prod):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdFvSourcedInputsTPsiAD(mode, c.vec, r.vec, f.vec, psi.vec, prod.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdFvSourcedInputsTPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":346
 *         self._thisptr.calcdFvSourcedInputsTPsiAD(mode, c.vec, r.vec, f.vec, psi.vec, prod.vec)
 * 
 *     def calcForceProfile(self, Vec xv, Vec state, Vec forceProfile, Vec radiusProfile):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcForceProfile(xv.vec, state.vec, forceProfile.vec, radiusProfile.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_147calcForceProfile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_147calcForceProfile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_xv = 0;
  struct PyPetscVecObject *__pyx_v_state = 0;
  struct PyPetscVecObject *__pyx_v_forceProfile = 0;
  struct PyPetscVecObject *__pyx_v_radiusProfile = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcForceProfile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xv,&__pyx_n_s_state,&__pyx_n_s_forceProfile,&__pyx_n_s_radiusProfile,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xv)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcForceProfile", 1, 4, 4, 1); __PYX_ERR(1, 346, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_forceProfile)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcForceProfile", 1, 4, 4, 2); __PYX_ERR(1, 346, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radiusProfile)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcForceProfile", 1, 4, 4, 3); __PYX_ERR(1, 346, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcForceProfile") < 0)) __PYX_ERR(1, 346, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_xv = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_state = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_forceProfile = ((struct PyPetscVecObject *)values[2]);
    __pyx_v_radiusProfile = ((struct PyPetscVecObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcForceProfile", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 346, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcForceProfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xv), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xv", 0))) __PYX_ERR(1, 346, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_state), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "state", 0))) __PYX_ERR(1, 346, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_forceProfile), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "forceProfile", 0))) __PYX_ERR(1, 346, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_radiusProfile), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "radiusProfile", 0))) __PYX_ERR(1, 346, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_146calcForceProfile(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_xv, __pyx_v_state, __pyx_v_forceProfile, __pyx_v_radiusProfile);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_146calcForceProfile(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_xv, struct PyPetscVecObject *__pyx_v_state, struct PyPetscVecObject *__pyx_v_forceProfile, struct PyPetscVecObject *__pyx_v_radiusProfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcForceProfile", 0);

  /* "pyDASolvers.pyx":347
 * 
 *     def calcForceProfile(self, Vec xv, Vec state, Vec forceProfile, Vec radiusProfile):
 *         self._thisptr.calcForceProfile(xv.vec, state.vec, forceProfile.vec, radiusProfile.vec)             # <<<<<<<<<<<<<<
 * 
 *     def calcdForcedStateTPsiAD(self, mode, Vec xv, Vec state, Vec psi, Vec prod):
 */
  __pyx_v_self->_thisptr->calcForceProfile(__pyx_v_xv->vec, __pyx_v_state->vec, __pyx_v_forceProfile->vec, __pyx_v_radiusProfile->vec);

  /* "pyDASolvers.pyx":346
 *         self._thisptr.calcdFvSourcedInputsTPsiAD(mode, c.vec, r.vec, f.vec, psi.vec, prod.vec)
 * 
 *     def calcForceProfile(self, Vec xv, Vec state, Vec forceProfile, Vec radiusProfile):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcForceProfile(xv.vec, state.vec, forceProfile.vec, radiusProfile.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":349
 *         self._thisptr.calcForceProfile(xv.vec, state.vec, forceProfile.vec, radiusProfile.vec)
 * 
 *     def calcdForcedStateTPsiAD(self, mode, Vec xv, Vec state, Vec psi, Vec prod):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdForcedStateTPsiAD(mode, xv.vec, state.vec, psi.vec, prod.vec)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_149calcdForcedStateTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_149calcdForcedStateTPsiAD(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mode = 0;
  struct PyPetscVecObject *__pyx_v_xv = 0;
  struct PyPetscVecObject *__pyx_v_state = 0;
  struct PyPetscVecObject *__pyx_v_psi = 0;
  struct PyPetscVecObject *__pyx_v_prod = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcdForcedStateTPsiAD (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mode,&__pyx_n_s_xv,&__pyx_n_s_state,&__pyx_n_s_psi,&__pyx_n_s_prod,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdForcedStateTPsiAD", 1, 5, 5, 1); __PYX_ERR(1, 349, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdForcedStateTPsiAD", 1, 5, 5, 2); __PYX_ERR(1, 349, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_psi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdForcedStateTPsiAD", 1, 5, 5, 3); __PYX_ERR(1, 349, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prod)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calcdForcedStateTPsiAD", 1, 5, 5, 4); __PYX_ERR(1, 349, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcdForcedStateTPsiAD") < 0)) __PYX_ERR(1, 349, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_mode = values[0];
    __pyx_v_xv = ((struct PyPetscVecObject *)values[1]);
    __pyx_v_state = ((struct PyPetscVecObject *)values[2]);
    __pyx_v_psi = ((struct PyPetscVecObject *)values[3]);
    __pyx_v_prod = ((struct PyPetscVecObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcdForcedStateTPsiAD", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 349, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdForcedStateTPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xv), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "xv", 0))) __PYX_ERR(1, 349, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_state), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "state", 0))) __PYX_ERR(1, 349, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_psi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "psi", 0))) __PYX_ERR(1, 349, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prod), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "prod", 0))) __PYX_ERR(1, 349, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_148calcdForcedStateTPsiAD(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_mode, __pyx_v_xv, __pyx_v_state, __pyx_v_psi, __pyx_v_prod);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_148calcdForcedStateTPsiAD(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, PyObject *__pyx_v_mode, struct PyPetscVecObject *__pyx_v_xv, struct PyPetscVecObject *__pyx_v_state, struct PyPetscVecObject *__pyx_v_psi, struct PyPetscVecObject *__pyx_v_prod) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcdForcedStateTPsiAD", 0);

  /* "pyDASolvers.pyx":350
 * 
 *     def calcdForcedStateTPsiAD(self, mode, Vec xv, Vec state, Vec psi, Vec prod):
 *         self._thisptr.calcdForcedStateTPsiAD(mode, xv.vec, state.vec, psi.vec, prod.vec)             # <<<<<<<<<<<<<<
 * 
 *     def runFPAdj(self, Vec dFdW, Vec psi):
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_mode); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 350, __pyx_L1_error)
  __pyx_v_self->_thisptr->calcdForcedStateTPsiAD(__pyx_t_1, __pyx_v_xv->vec, __pyx_v_state->vec, __pyx_v_psi->vec, __pyx_v_prod->vec);

  /* "pyDASolvers.pyx":349
 *         self._thisptr.calcForceProfile(xv.vec, state.vec, forceProfile.vec, radiusProfile.vec)
 * 
 *     def calcdForcedStateTPsiAD(self, mode, Vec xv, Vec state, Vec psi, Vec prod):             # <<<<<<<<<<<<<<
 *         self._thisptr.calcdForcedStateTPsiAD(mode, xv.vec, state.vec, psi.vec, prod.vec)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.calcdForcedStateTPsiAD", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyDASolvers.pyx":352
 *         self._thisptr.calcdForcedStateTPsiAD(mode, xv.vec, state.vec, psi.vec, prod.vec)
 * 
 *     def runFPAdj(self, Vec dFdW, Vec psi):             # <<<<<<<<<<<<<<
 *         return self._thisptr.runFPAdj(dFdW.vec, psi.vec)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_151runFPAdj(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_151runFPAdj(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct PyPetscVecObject *__pyx_v_dFdW = 0;
  struct PyPetscVecObject *__pyx_v_psi = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("runFPAdj (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dFdW,&__pyx_n_s_psi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dFdW)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_psi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("runFPAdj", 1, 2, 2, 1); __PYX_ERR(1, 352, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "runFPAdj") < 0)) __PYX_ERR(1, 352, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dFdW = ((struct PyPetscVecObject *)values[0]);
    __pyx_v_psi = ((struct PyPetscVecObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("runFPAdj", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 352, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.runFPAdj", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dFdW), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "dFdW", 0))) __PYX_ERR(1, 352, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_psi), __pyx_ptype_8petsc4py_5PETSc_Vec, 1, "psi", 0))) __PYX_ERR(1, 352, __pyx_L1_error)
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_150runFPAdj(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), __pyx_v_dFdW, __pyx_v_psi);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_150runFPAdj(struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, struct PyPetscVecObject *__pyx_v_dFdW, struct PyPetscVecObject *__pyx_v_psi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("runFPAdj", 0);

  /* "pyDASolvers.pyx":353
 * 
 *     def runFPAdj(self, Vec dFdW, Vec psi):
 *         return self._thisptr.runFPAdj(dFdW.vec, psi.vec)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_thisptr->runFPAdj(__pyx_v_dFdW->vec, __pyx_v_psi->vec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyDASolvers.pyx":352
 *         self._thisptr.calcdForcedStateTPsiAD(mode, xv.vec, state.vec, psi.vec, prod.vec)
 * 
 *     def runFPAdj(self, Vec dFdW, Vec psi):             # <<<<<<<<<<<<<<
 *         return self._thisptr.runFPAdj(dFdW.vec, psi.vec)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.runFPAdj", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_153__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_153__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_152__reduce_cython__(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_152__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_155__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_15pyDASolverSolid_11pyDASolvers_155__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15pyDASolverSolid_11pyDASolvers_154__setstate_cython__(((struct __pyx_obj_15pyDASolverSolid_pyDASolvers *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15pyDASolverSolid_11pyDASolvers_154__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_15pyDASolverSolid_pyDASolvers *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyDASolverSolid.pyDASolvers.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_15pyDASolverSolid_pyDASolvers(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_15pyDASolverSolid_11pyDASolvers_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_15pyDASolverSolid_pyDASolvers(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_15pyDASolverSolid_11pyDASolvers_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_15pyDASolverSolid_pyDASolvers[] = {
  {"initSolver", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_7initSolver, METH_NOARGS, 0},
  {"solvePrimal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_9solvePrimal, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdRdWT", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_11calcdRdWT, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdRdWTPsiAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_13calcdRdWTPsiAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"initializedRdWTMatrixFree", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_15initializedRdWTMatrixFree, METH_VARARGS|METH_KEYWORDS, 0},
  {"destroydRdWTMatrixFree", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_17destroydRdWTMatrixFree, METH_NOARGS, 0},
  {"calcdFdW", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_19calcdFdW, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdFdWAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_21calcdFdWAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"createMLRKSP", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_23createMLRKSP, METH_VARARGS|METH_KEYWORDS, 0},
  {"createMLRKSPMatrixFree", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_25createMLRKSPMatrixFree, METH_VARARGS|METH_KEYWORDS, 0},
  {"solveLinearEqn", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_27solveLinearEqn, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdRdBC", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_29calcdRdBC, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdFdBC", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_31calcdFdBC, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdFdBCAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_33calcdFdBCAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdRdAOA", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_35calcdRdAOA, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdFdAOA", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_37calcdFdAOA, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdRdFFD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_39calcdRdFFD, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdRdXvTPsiAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_41calcdRdXvTPsiAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdForcedXvAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_43calcdForcedXvAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdRdActTPsiAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_45calcdRdActTPsiAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdForcedWAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_47calcdForcedWAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdFdACTAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_49calcdFdACTAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdFdACT", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_51calcdFdACT, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdRdAOATPsiAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_53calcdRdAOATPsiAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdRdBCTPsiAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_55calcdRdBCTPsiAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdFdFFD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_57calcdFdFFD, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdFdXvAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_59calcdFdXvAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdRdACT", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_61calcdRdACT, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdRdFieldTPsiAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_63calcdRdFieldTPsiAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdFdFieldAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_65calcdFdFieldAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdRdWOldTPsiAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_67calcdRdWOldTPsiAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"convertMPIVec2SeqVec", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_69convertMPIVec2SeqVec, METH_VARARGS|METH_KEYWORDS, 0},
  {"syncDAOptionToActuatorDVs", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_71syncDAOptionToActuatorDVs, METH_NOARGS, 0},
  {"updateOFField", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_73updateOFField, METH_O, 0},
  {"updateOFMesh", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_75updateOFMesh, METH_O, 0},
  {"setdXvdFFDMat", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_77setdXvdFFDMat, METH_O, 0},
  {"setFFD2XvSeedVec", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_79setFFD2XvSeedVec, METH_O, 0},
  {"getGlobalXvIndex", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_81getGlobalXvIndex, METH_VARARGS|METH_KEYWORDS, 0},
  {"ofField2StateVec", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_83ofField2StateVec, METH_O, 0},
  {"stateVec2OFField", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_85stateVec2OFField, METH_O, 0},
  {"pointVec2OFMesh", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_87pointVec2OFMesh, METH_O, 0},
  {"ofMesh2PointVec", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_89ofMesh2PointVec, METH_O, 0},
  {"resVec2OFResField", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_91resVec2OFResField, METH_O, 0},
  {"ofResField2ResVec", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_93ofResField2ResVec, METH_O, 0},
  {"getNLocalAdjointStates", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_95getNLocalAdjointStates, METH_NOARGS, 0},
  {"getNLocalAdjointBoundaryStates", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_97getNLocalAdjointBoundaryStates, METH_NOARGS, 0},
  {"getNLocalCells", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_99getNLocalCells, METH_NOARGS, 0},
  {"checkMesh", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_101checkMesh, METH_NOARGS, 0},
  {"getObjFuncValue", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_103getObjFuncValue, METH_O, 0},
  {"getForces", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_105getForces, METH_VARARGS|METH_KEYWORDS, 0},
  {"printAllOptions", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_107printAllOptions, METH_NOARGS, 0},
  {"updateDAOption", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_109updateDAOption, METH_O, 0},
  {"getPrevPrimalSolTime", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_111getPrevPrimalSolTime, METH_NOARGS, 0},
  {"writeMatrixBinary", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_113writeMatrixBinary, METH_VARARGS|METH_KEYWORDS, 0},
  {"writeMatrixASCII", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_115writeMatrixASCII, METH_VARARGS|METH_KEYWORDS, 0},
  {"readMatrixBinary", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_117readMatrixBinary, METH_VARARGS|METH_KEYWORDS, 0},
  {"writeVectorASCII", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_119writeVectorASCII, METH_VARARGS|METH_KEYWORDS, 0},
  {"readVectorBinary", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_121readVectorBinary, METH_VARARGS|METH_KEYWORDS, 0},
  {"writeVectorBinary", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_123writeVectorBinary, METH_VARARGS|METH_KEYWORDS, 0},
  {"setTimeInstanceField", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_125setTimeInstanceField, METH_O, 0},
  {"setTimeInstanceVar", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_127setTimeInstanceVar, METH_VARARGS|METH_KEYWORDS, 0},
  {"getTimeInstanceObjFunc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_129getTimeInstanceObjFunc, METH_VARARGS|METH_KEYWORDS, 0},
  {"setFieldValue4GlobalCellI", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_131setFieldValue4GlobalCellI, METH_VARARGS|METH_KEYWORDS, 0},
  {"updateBoundaryConditions", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_133updateBoundaryConditions, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcPrimalResidualStatistics", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_135calcPrimalResidualStatistics, METH_O, 0},
  {"getForwardADDerivVal", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_137getForwardADDerivVal, METH_O, 0},
  {"calcResidualVec", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_139calcResidualVec, METH_O, 0},
  {"setPrimalBoundaryConditions", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_141setPrimalBoundaryConditions, METH_O, 0},
  {"calcFvSource", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_143calcFvSource, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdFvSourcedInputsTPsiAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_145calcdFvSourcedInputsTPsiAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcForceProfile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_147calcForceProfile, METH_VARARGS|METH_KEYWORDS, 0},
  {"calcdForcedStateTPsiAD", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_149calcdForcedStateTPsiAD, METH_VARARGS|METH_KEYWORDS, 0},
  {"runFPAdj", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15pyDASolverSolid_11pyDASolvers_151runFPAdj, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_153__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_15pyDASolverSolid_11pyDASolvers_155__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_15pyDASolverSolid_pyDASolvers = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyDASolverSolid.pyDASolvers", /*tp_name*/
  sizeof(struct __pyx_obj_15pyDASolverSolid_pyDASolvers), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_15pyDASolverSolid_pyDASolvers, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_15pyDASolverSolid_pyDASolvers, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_15pyDASolverSolid_11pyDASolvers_5__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_15pyDASolverSolid_pyDASolvers, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_pyDASolverSolid(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_pyDASolverSolid},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "pyDASolverSolid",
    __pyx_k_DAFoam_Discrete_Adjoint_with_Op, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_aForce, __pyx_k_aForce, sizeof(__pyx_k_aForce), 0, 0, 1, 1},
  {&__pyx_n_s_argsAll, __pyx_k_argsAll, sizeof(__pyx_k_argsAll), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_center, __pyx_k_center, sizeof(__pyx_k_center), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_compI, __pyx_k_compI, sizeof(__pyx_k_compI), 0, 0, 1, 1},
  {&__pyx_n_s_coordI, __pyx_k_coordI, sizeof(__pyx_k_coordI), 0, 0, 1, 1},
  {&__pyx_n_s_dFdACT, __pyx_k_dFdACT, sizeof(__pyx_k_dFdACT), 0, 0, 1, 1},
  {&__pyx_n_s_dFdAOA, __pyx_k_dFdAOA, sizeof(__pyx_k_dFdAOA), 0, 0, 1, 1},
  {&__pyx_n_s_dFdBC, __pyx_k_dFdBC, sizeof(__pyx_k_dFdBC), 0, 0, 1, 1},
  {&__pyx_n_s_dFdFFD, __pyx_k_dFdFFD, sizeof(__pyx_k_dFdFFD), 0, 0, 1, 1},
  {&__pyx_n_s_dFdField, __pyx_k_dFdField, sizeof(__pyx_k_dFdField), 0, 0, 1, 1},
  {&__pyx_n_s_dFdW, __pyx_k_dFdW, sizeof(__pyx_k_dFdW), 0, 0, 1, 1},
  {&__pyx_n_s_dFdXv, __pyx_k_dFdXv, sizeof(__pyx_k_dFdXv), 0, 0, 1, 1},
  {&__pyx_n_s_dForcedW, __pyx_k_dForcedW, sizeof(__pyx_k_dForcedW), 0, 0, 1, 1},
  {&__pyx_n_s_dForcedXv, __pyx_k_dForcedXv, sizeof(__pyx_k_dForcedXv), 0, 0, 1, 1},
  {&__pyx_n_s_dRdACT, __pyx_k_dRdACT, sizeof(__pyx_k_dRdACT), 0, 0, 1, 1},
  {&__pyx_n_s_dRdAOA, __pyx_k_dRdAOA, sizeof(__pyx_k_dRdAOA), 0, 0, 1, 1},
  {&__pyx_n_s_dRdAOATPsi, __pyx_k_dRdAOATPsi, sizeof(__pyx_k_dRdAOATPsi), 0, 0, 1, 1},
  {&__pyx_n_s_dRdActTPsi, __pyx_k_dRdActTPsi, sizeof(__pyx_k_dRdActTPsi), 0, 0, 1, 1},
  {&__pyx_n_s_dRdBC, __pyx_k_dRdBC, sizeof(__pyx_k_dRdBC), 0, 0, 1, 1},
  {&__pyx_n_s_dRdBCTPsi, __pyx_k_dRdBCTPsi, sizeof(__pyx_k_dRdBCTPsi), 0, 0, 1, 1},
  {&__pyx_n_s_dRdFFD, __pyx_k_dRdFFD, sizeof(__pyx_k_dRdFFD), 0, 0, 1, 1},
  {&__pyx_n_s_dRdFieldTPsi, __pyx_k_dRdFieldTPsi, sizeof(__pyx_k_dRdFieldTPsi), 0, 0, 1, 1},
  {&__pyx_n_s_dRdWOldTPsi, __pyx_k_dRdWOldTPsi, sizeof(__pyx_k_dRdWOldTPsi), 0, 0, 1, 1},
  {&__pyx_n_s_dRdWT, __pyx_k_dRdWT, sizeof(__pyx_k_dRdWT), 0, 0, 1, 1},
  {&__pyx_n_s_dRdWTPsi, __pyx_k_dRdWTPsi, sizeof(__pyx_k_dRdWTPsi), 0, 0, 1, 1},
  {&__pyx_n_s_dRdXvTPsi, __pyx_k_dRdXvTPsi, sizeof(__pyx_k_dRdXvTPsi), 0, 0, 1, 1},
  {&__pyx_n_s_designVarName, __pyx_k_designVarName, sizeof(__pyx_k_designVarName), 0, 0, 1, 1},
  {&__pyx_n_s_designVarType, __pyx_k_designVarType, sizeof(__pyx_k_designVarType), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_fBarVec, __pyx_k_fBarVec, sizeof(__pyx_k_fBarVec), 0, 0, 1, 1},
  {&__pyx_n_s_fX, __pyx_k_fX, sizeof(__pyx_k_fX), 0, 0, 1, 1},
  {&__pyx_n_s_fY, __pyx_k_fY, sizeof(__pyx_k_fY), 0, 0, 1, 1},
  {&__pyx_n_s_fZ, __pyx_k_fZ, sizeof(__pyx_k_fZ), 0, 0, 1, 1},
  {&__pyx_n_s_fieldName, __pyx_k_fieldName, sizeof(__pyx_k_fieldName), 0, 0, 1, 1},
  {&__pyx_n_s_fieldType, __pyx_k_fieldType, sizeof(__pyx_k_fieldType), 0, 0, 1, 1},
  {&__pyx_n_s_forceProfile, __pyx_k_forceProfile, sizeof(__pyx_k_forceProfile), 0, 0, 1, 1},
  {&__pyx_n_s_fvSource, __pyx_k_fvSource, sizeof(__pyx_k_fvSource), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_globalCellI, __pyx_k_globalCellI, sizeof(__pyx_k_globalCellI), 0, 0, 1, 1},
  {&__pyx_n_s_instanceI, __pyx_k_instanceI, sizeof(__pyx_k_instanceI), 0, 0, 1, 1},
  {&__pyx_n_s_isPC, __pyx_k_isPC, sizeof(__pyx_k_isPC), 0, 0, 1, 1},
  {&__pyx_n_s_jacMat, __pyx_k_jacMat, sizeof(__pyx_k_jacMat), 0, 0, 1, 1},
  {&__pyx_n_s_jacPCMat, __pyx_k_jacPCMat, sizeof(__pyx_k_jacPCMat), 0, 0, 1, 1},
  {&__pyx_n_s_magIn, __pyx_k_magIn, sizeof(__pyx_k_magIn), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_mpiVec, __pyx_k_mpiVec, sizeof(__pyx_k_mpiVec), 0, 0, 1, 1},
  {&__pyx_n_s_myKSP, __pyx_k_myKSP, sizeof(__pyx_k_myKSP), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_objFuncName, __pyx_k_objFuncName, sizeof(__pyx_k_objFuncName), 0, 0, 1, 1},
  {&__pyx_n_s_oldTimeLevel, __pyx_k_oldTimeLevel, sizeof(__pyx_k_oldTimeLevel), 0, 0, 1, 1},
  {&__pyx_n_s_pointI, __pyx_k_pointI, sizeof(__pyx_k_pointI), 0, 0, 1, 1},
  {&__pyx_n_s_pointList, __pyx_k_pointList, sizeof(__pyx_k_pointList), 0, 0, 1, 1},
  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_prod, __pyx_k_prod, sizeof(__pyx_k_prod), 0, 0, 1, 1},
  {&__pyx_n_s_psi, __pyx_k_psi, sizeof(__pyx_k_psi), 0, 0, 1, 1},
  {&__pyx_n_s_psiVec, __pyx_k_psiVec, sizeof(__pyx_k_psiVec), 0, 0, 1, 1},
  {&__pyx_n_s_pyDASolvers, __pyx_k_pyDASolvers, sizeof(__pyx_k_pyDASolvers), 0, 0, 1, 1},
  {&__pyx_n_s_pyOptions, __pyx_k_pyOptions, sizeof(__pyx_k_pyOptions), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_rDistExt, __pyx_k_rDistExt, sizeof(__pyx_k_rDistExt), 0, 0, 1, 1},
  {&__pyx_n_s_radiusProfile, __pyx_k_radiusProfile, sizeof(__pyx_k_radiusProfile), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_rhsVec, __pyx_k_rhsVec, sizeof(__pyx_k_rhsVec), 0, 0, 1, 1},
  {&__pyx_n_s_seqVec, __pyx_k_seqVec, sizeof(__pyx_k_seqVec), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_solVec, __pyx_k_solVec, sizeof(__pyx_k_solVec), 0, 0, 1, 1},
  {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
  {&__pyx_n_s_stateBCMat, __pyx_k_stateBCMat, sizeof(__pyx_k_stateBCMat), 0, 0, 1, 1},
  {&__pyx_n_s_stateMat, __pyx_k_stateMat, sizeof(__pyx_k_stateMat), 0, 0, 1, 1},
  {&__pyx_n_s_tForce, __pyx_k_tForce, sizeof(__pyx_k_tForce), 0, 0, 1, 1},
  {&__pyx_n_s_targetForce, __pyx_k_targetForce, sizeof(__pyx_k_targetForce), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_timeIdxVec, __pyx_k_timeIdxVec, sizeof(__pyx_k_timeIdxVec), 0, 0, 1, 1},
  {&__pyx_n_s_timeVec, __pyx_k_timeVec, sizeof(__pyx_k_timeVec), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_vecIn, __pyx_k_vecIn, sizeof(__pyx_k_vecIn), 0, 0, 1, 1},
  {&__pyx_n_s_wVec, __pyx_k_wVec, sizeof(__pyx_k_wVec), 0, 0, 1, 1},
  {&__pyx_n_s_xv, __pyx_k_xv, sizeof(__pyx_k_xv), 0, 0, 1, 1},
  {&__pyx_n_s_xvVec, __pyx_k_xvVec, sizeof(__pyx_k_xvVec), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 2, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_15pyDASolverSolid_pyDASolvers) < 0) __PYX_ERR(1, 98, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_15pyDASolverSolid_pyDASolvers.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_15pyDASolverSolid_pyDASolvers.tp_dictoffset && __pyx_type_15pyDASolverSolid_pyDASolvers.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_15pyDASolverSolid_pyDASolvers.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_15pyDASolverSolid_pyDASolvers, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 98, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_15pyDASolverSolid_11pyDASolvers_4__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_15pyDASolverSolid_11pyDASolvers_4__init__.doc = __pyx_doc_15pyDASolverSolid_11pyDASolvers_4__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_15pyDASolverSolid_11pyDASolvers_4__init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyDASolvers, (PyObject *)&__pyx_type_15pyDASolverSolid_pyDASolvers) < 0) __PYX_ERR(1, 98, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_15pyDASolverSolid_pyDASolvers) < 0) __PYX_ERR(1, 98, __pyx_L1_error)
  __pyx_ptype_15pyDASolverSolid_pyDASolvers = &__pyx_type_15pyDASolverSolid_pyDASolvers;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("petsc4py.PETSc"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_8petsc4py_5PETSc_Comm = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "Comm", sizeof(struct PyPetscCommObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_Comm) __PYX_ERR(2, 91, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_Object = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "Object", sizeof(struct PyPetscObjectObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_Object) __PYX_ERR(2, 99, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_Object = (struct __pyx_vtabstruct_8petsc4py_5PETSc_Object*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_Object->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_Object)) __PYX_ERR(2, 99, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_Viewer = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "Viewer", sizeof(struct PyPetscViewerObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_Viewer) __PYX_ERR(2, 111, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_Viewer = (struct __pyx_vtabstruct_8petsc4py_5PETSc_Viewer*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_Viewer->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_Viewer)) __PYX_ERR(2, 111, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_Random = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "Random", sizeof(struct PyPetscRandomObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_Random) __PYX_ERR(2, 117, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_Random = (struct __pyx_vtabstruct_8petsc4py_5PETSc_Random*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_Random->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_Random)) __PYX_ERR(2, 117, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_IS = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "IS", sizeof(struct PyPetscISObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_IS) __PYX_ERR(2, 123, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_IS = (struct __pyx_vtabstruct_8petsc4py_5PETSc_IS*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_IS->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_IS)) __PYX_ERR(2, 123, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_LGMap = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "LGMap", sizeof(struct PyPetscLGMapObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_LGMap) __PYX_ERR(2, 129, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_LGMap = (struct __pyx_vtabstruct_8petsc4py_5PETSc_LGMap*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_LGMap->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_LGMap)) __PYX_ERR(2, 129, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_SF = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "SF", sizeof(struct PyPetscSFObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_SF) __PYX_ERR(2, 135, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_SF = (struct __pyx_vtabstruct_8petsc4py_5PETSc_SF*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_SF->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_SF)) __PYX_ERR(2, 135, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_Vec = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "Vec", sizeof(struct PyPetscVecObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_Vec) __PYX_ERR(2, 141, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_Vec = (struct __pyx_vtabstruct_8petsc4py_5PETSc_Vec*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_Vec->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_Vec)) __PYX_ERR(2, 141, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_FE = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "FE", sizeof(struct PyPetscFEObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_FE) __PYX_ERR(2, 147, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_FE = (struct __pyx_vtabstruct_8petsc4py_5PETSc_FE*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_FE->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_FE)) __PYX_ERR(2, 147, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_Quad = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "Quad", sizeof(struct PyPetscQuadObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_Quad) __PYX_ERR(2, 153, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_Quad = (struct __pyx_vtabstruct_8petsc4py_5PETSc_Quad*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_Quad->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_Quad)) __PYX_ERR(2, 153, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_Scatter = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "Scatter", sizeof(struct PyPetscScatterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_Scatter) __PYX_ERR(2, 159, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_Scatter = (struct __pyx_vtabstruct_8petsc4py_5PETSc_Scatter*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_Scatter->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_Scatter)) __PYX_ERR(2, 159, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_Section = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "Section", sizeof(struct PyPetscSectionObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_Section) __PYX_ERR(2, 165, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_Section = (struct __pyx_vtabstruct_8petsc4py_5PETSc_Section*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_Section->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_Section)) __PYX_ERR(2, 165, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_Mat = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "Mat", sizeof(struct PyPetscMatObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_Mat) __PYX_ERR(2, 171, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_Mat = (struct __pyx_vtabstruct_8petsc4py_5PETSc_Mat*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_Mat->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_Mat)) __PYX_ERR(2, 171, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_NullSpace = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "NullSpace", sizeof(struct PyPetscNullSpaceObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_NullSpace) __PYX_ERR(2, 177, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_NullSpace = (struct __pyx_vtabstruct_8petsc4py_5PETSc_NullSpace*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_NullSpace->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_NullSpace)) __PYX_ERR(2, 177, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_PC = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "PC", sizeof(struct PyPetscPCObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_PC) __PYX_ERR(2, 183, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_PC = (struct __pyx_vtabstruct_8petsc4py_5PETSc_PC*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_PC->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_PC)) __PYX_ERR(2, 183, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_KSP = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "KSP", sizeof(struct PyPetscKSPObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_KSP) __PYX_ERR(2, 189, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_KSP = (struct __pyx_vtabstruct_8petsc4py_5PETSc_KSP*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_KSP->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_KSP)) __PYX_ERR(2, 189, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_SNES = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "SNES", sizeof(struct PyPetscSNESObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_SNES) __PYX_ERR(2, 195, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_SNES = (struct __pyx_vtabstruct_8petsc4py_5PETSc_SNES*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_SNES->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_SNES)) __PYX_ERR(2, 195, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_TS = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "TS", sizeof(struct PyPetscTSObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_TS) __PYX_ERR(2, 201, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_TS = (struct __pyx_vtabstruct_8petsc4py_5PETSc_TS*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_TS->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_TS)) __PYX_ERR(2, 201, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_TAO = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "TAO", sizeof(struct PyPetscTAOObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_TAO) __PYX_ERR(2, 207, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_TAO = (struct __pyx_vtabstruct_8petsc4py_5PETSc_TAO*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_TAO->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_TAO)) __PYX_ERR(2, 207, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_AO = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "AO", sizeof(struct PyPetscAOObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_AO) __PYX_ERR(2, 213, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_AO = (struct __pyx_vtabstruct_8petsc4py_5PETSc_AO*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_AO->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_AO)) __PYX_ERR(2, 213, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_DM = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "DM", sizeof(struct PyPetscDMObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_DM) __PYX_ERR(2, 219, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_DM = (struct __pyx_vtabstruct_8petsc4py_5PETSc_DM*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_DM->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_DM)) __PYX_ERR(2, 219, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_DS = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "DS", sizeof(struct PyPetscDSObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_DS) __PYX_ERR(2, 225, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_DS = (struct __pyx_vtabstruct_8petsc4py_5PETSc_DS*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_DS->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_DS)) __PYX_ERR(2, 225, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_Partitioner = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "Partitioner", sizeof(struct PyPetscPartitionerObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_Partitioner) __PYX_ERR(2, 231, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_Partitioner = (struct __pyx_vtabstruct_8petsc4py_5PETSc_Partitioner*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_Partitioner->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_Partitioner)) __PYX_ERR(2, 231, __pyx_L1_error)
  __pyx_ptype_8petsc4py_5PETSc_DMLabel = __Pyx_ImportType(__pyx_t_1, "petsc4py.PETSc", "DMLabel", sizeof(struct PyPetscDMLabelObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8petsc4py_5PETSc_DMLabel) __PYX_ERR(2, 237, __pyx_L1_error)
  __pyx_vtabptr_8petsc4py_5PETSc_DMLabel = (struct __pyx_vtabstruct_8petsc4py_5PETSc_DMLabel*)__Pyx_GetVtable(__pyx_ptype_8petsc4py_5PETSc_DMLabel->tp_dict); if (unlikely(!__pyx_vtabptr_8petsc4py_5PETSc_DMLabel)) __PYX_ERR(2, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initpyDASolverSolid(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initpyDASolverSolid(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_pyDASolverSolid(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_pyDASolverSolid(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_pyDASolverSolid(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'pyDASolverSolid' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_pyDASolverSolid(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 2, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("pyDASolverSolid", __pyx_methods, __pyx_k_DAFoam_Discrete_Adjoint_with_Op, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 2, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 2, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 2, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 2, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 2, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pyDASolverSolid) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 2, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyDASolverSolid")) {
      if (unlikely(PyDict_SetItemString(modules, "pyDASolverSolid", __pyx_m) < 0)) __PYX_ERR(1, 2, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(1, 2, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(1, 2, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  #endif

  /* "pyDASolvers.pyx":2
 * 
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # distutils: sources = DASolvers.C
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pyDASolverSolid", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyDASolverSolid");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
