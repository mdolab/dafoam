name: codecov

on: [push, pull_request]

env:
  REPO_NAME: 'dafoam'
  DOCKER_WORKING_DIR: '/home/dafoamuser/dafoam/$REPO_NAME'
  DOCKER_MOUNT_DIR: '/home/dafoamuser/mount/$REPO_NAME'
  DOCKER_TAG: 'latest'
  DOCKER_ENV_FILE: '/home/dafoamuser/dafoam/loadDAFoam.sh'
  DOCKER_PYTHON_PACKAGE_PATH: '/home/dafoamuser/dafoam/packages/miniconda3/lib/python3.6/site-packages/dafoam'
  DOCKER_OF_ADF_BASHRC: '/home/dafoamuser/dafoam/OpenFOAM/OpenFOAM-v1812-ADF/etc/bashrc'
  DOCKER_OF_ADR_BASHRC: '/home/dafoamuser/dafoam/OpenFOAM/OpenFOAM-v1812-ADR/etc/bashrc'

jobs:
  code_coverage:
    runs-on: ubuntu-18.04
    name: Codecov
    strategy:
      fail-fast: false
      matrix: 
        testConfig: [incompressible, compressible, solid, forward, python]
        include:
          - testConfig: incompressible
            args: 'incompressible'
          - testConfig: compressible
            args: 'compressible'
          - testConfig: solid
            args: 'solid'
          - testConfig: forward
            args: 'forward'
          - testConfig: python
            args: 'python'

    steps:
    - uses: actions/checkout@v2
    - name: Create the docker container and run the tests
      run: |
        docker pull dafoam/opt-packages:${{env.DOCKER_TAG}}
        docker run -i -d -u dafoamuser --name regtest -v $GITHUB_WORKSPACE:${{env.DOCKER_MOUNT_DIR}} dafoam/opt-packages:${{env.DOCKER_TAG}} /bin/bash
        docker exec -i regtest /bin/bash -c "rm -rf ${{env.DOCKER_WORKING_DIR}} && cp -r ${{env.DOCKER_MOUNT_DIR}} ${{env.DOCKER_WORKING_DIR}}"

        if [ "${{matrix.args}}" = "python" ]; then
           docker exec -i regtest /bin/bash -c ". ${{env.DOCKER_ENV_FILE}} && pip install coverage"
        else
           docker exec -i regtest /bin/bash -c ". ${{env.DOCKER_ENV_FILE}} && pip install cpp-coveralls"
           docker exec regtest sed -i 's/-std=c++11/-std=c++11 -coverage/g' ${{env.DOCKER_WORKING_DIR}}/src/adjoint/Make/options_Incompressible
           docker exec regtest sed -i 's/-lOpenFOAM$(DF_LIB_SUFFIX)/-lOpenFOAM$(DF_LIB_SUFFIX) -lgcov/g' ${{env.DOCKER_WORKING_DIR}}/src/adjoint/Make/options_Incompressible
           docker exec regtest sed -i 's/-std=c++11/-std=c++11 -coverage/g' ${{env.DOCKER_WORKING_DIR}}/src/adjoint/Make/options_Compressible
           docker exec regtest sed -i 's/-lOpenFOAM$(DF_LIB_SUFFIX)/-lOpenFOAM$(DF_LIB_SUFFIX) -lgcov/g' ${{env.DOCKER_WORKING_DIR}}/src/adjoint/Make/options_Compressible
           docker exec regtest sed -i 's/-std=c++11/-std=c++11 -coverage/g' ${{env.DOCKER_WORKING_DIR}}/src/adjoint/Make/options_Solid
           docker exec regtest sed -i 's/-lOpenFOAM$(DF_LIB_SUFFIX)/-lOpenFOAM$(DF_LIB_SUFFIX) -lgcov/g' ${{env.DOCKER_WORKING_DIR}}/src/adjoint/Make/options_Solid
           docker exec -i regtest /bin/bash -c "cd ${{env.DOCKER_WORKING_DIR}}/src && cp -r adjoint adjointAD && cp -r pyDASolvers pyDASolversAD"
        fi

        if [ "${{matrix.args}}" = "forward" ]; then
           docker exec -i regtest /bin/bash -c ". ${{env.DOCKER_ENV_FILE}} && cd ${{env.DOCKER_WORKING_DIR}} && ./Allmake incompressible"
           docker exec -i regtest /bin/bash -c ". ${{env.DOCKER_ENV_FILE}} && . ${{env.DOCKER_OF_ADF_BASHRC}} && cd ${{env.DOCKER_WORKING_DIR}}/src/adjointAD && ./Allmake incompressible 2> makeWarnings.txt && cd ../pyDASolversAD && ./Allmake incompressible 2> makeWarnings.txt"
        elif [ "${{matrix.args}}" = "python" ]; then
           docker exec -i regtest /bin/bash -c ". ${{env.DOCKER_ENV_FILE}} && cd ${{env.DOCKER_WORKING_DIR}} && ./Allmake incompressible"
        else
           docker exec -i regtest /bin/bash -c ". ${{env.DOCKER_ENV_FILE}} && cd ${{env.DOCKER_WORKING_DIR}} && ./Allmake ${{matrix.args}}"
           docker exec -i regtest /bin/bash -c ". ${{env.DOCKER_ENV_FILE}} && . ${{env.DOCKER_OF_ADR_BASHRC}} && cd ${{env.DOCKER_WORKING_DIR}}/src/adjointAD && ./Allmake ${{matrix.args}} 2> makeWarnings.txt && cd ../pyDASolversAD && ./Allmake ${{matrix.args}} 2> makeWarnings.txt"
        fi

        docker exec -i regtest /bin/bash -c ". ${{env.DOCKER_ENV_FILE}} && cd ${{env.DOCKER_WORKING_DIR}} && pip install ."

        if [ "${{matrix.args}}" = "python" ]; then
           docker exec -i regtest /bin/bash -c ". ${{env.DOCKER_ENV_FILE}} && cd ${{env.DOCKER_WORKING_DIR}}/tests && wget https://github.com/dafoam/files/releases/download/v1.0.0/input.tar.gz --no-check-certificate && tar -xvf input.tar.gz"
           docker exec -i regtest /bin/bash -c ". ${{env.DOCKER_ENV_FILE}} && cd ${{env.DOCKER_WORKING_DIR}}/tests && coverage run -p --include=${{env.DOCKER_PYTHON_PACKAGE_PATH}}/pyDAFoam.py runTests_Integration.py && rm -rf input && tar -xvf input.tar.gz && mpirun -np 4 coverage run -p --include=${{env.DOCKER_PYTHON_PACKAGE_PATH}}/pyDAFoam.py runTests_Integration.py && coverage combine && echo dafoamuser | sudo -S cp -r * ${{env.DOCKER_MOUNT_DIR}}/"
        else
           docker exec -i -e DF_CHECK_COVERAGE=1 regtest /bin/bash -c ". ${{env.DOCKER_ENV_FILE}} && cd ${{env.DOCKER_WORKING_DIR}}/tests && ./Allrun ${{matrix.args}}"
           docker exec -i regtest /bin/bash -c ". ${{env.DOCKER_ENV_FILE}} && cd ${{env.DOCKER_WORKING_DIR}}/src/adjoint && cp -r ../include ./Make/linux*/DASolver/ && cp -r ../include ./Make/linux*/ && coveralls --dryrun --gcov-options '\-lp' && echo dafoamuser | sudo -S cp -r ../adjoint ${{env.DOCKER_MOUNT_DIR}}/"
           docker exec -i regtest /bin/bash -c ". ${{env.DOCKER_ENV_FILE}} && cd ${{env.DOCKER_WORKING_DIR}}/src/adjointAD && cp -r ../include ./Make/linux*/DASolver/ && cp -r ../include ./Make/linux*/ && coveralls --dryrun --gcov-options '\-lp' && echo dafoamuser | sudo -S cp -r ../adjointAD ${{env.DOCKER_MOUNT_DIR}}/"
           
        fi

        bash <(curl -s https://codecov.io/bash)

